/* Generated by Yosys 0.33 (git sha1 2584903a0, gcc 12.2.0-14 -fPIC -Os) */

(* cells_not_processed =  1  *)
(* src = "src/alu/arithm/add.v:4.1-15.10" *)
module add(a, b, cin, out, cout);
  (* src = "src/alu/arithm/add.v:10.9-10.32" *)
  wire _00_;
  (* src = "src/alu/arithm/add.v:12.9-12.36" *)
  wire _01_;
  (* src = "src/alu/arithm/add.v:13.9-13.39" *)
  wire _02_;
  (* src = "src/alu/arithm/add.v:0.0-0.0" *)
  wire _03_;
  (* src = "src/alu/arithm/add.v:0.0-0.0" *)
  wire _04_;
  (* src = "src/alu/arithm/add.v:0.0-0.0" *)
  wire _05_;
  (* src = "src/alu/arithm/add.v:11.8-11.30" *)
  wire _06_;
  (* src = "src/alu/arithm/add.v:14.18-14.23" *)
  wire _07_;
  (* src = "src/alu/arithm/add.v:14.18-14.29" *)
  wire _08_;
  (* src = "src/alu/arithm/add.v:5.10-5.11" *)
  input a;
  wire a;
  (* src = "src/alu/arithm/add.v:5.13-5.14" *)
  input b;
  wire b;
  (* src = "src/alu/arithm/add.v:5.16-5.19" *)
  input cin;
  wire cin;
  (* src = "src/alu/arithm/add.v:6.16-6.20" *)
  output cout;
  wire cout;
  (* src = "src/alu/arithm/add.v:8.15-8.19" *)
  wire [2:0] line;
  (* src = "src/alu/arithm/add.v:6.11-6.14" *)
  output out;
  wire out;
  assign _00_ = a & (* src = "src/alu/arithm/add.v:10.9-10.32" *) cin;
  assign _01_ = line[1] & (* src = "src/alu/arithm/add.v:12.9-12.36" *) b;
  assign _02_ = line[0] & (* src = "src/alu/arithm/add.v:13.9-13.39" *) line[2];
  assign _03_ = ~ (* src = "src/alu/arithm/add.v:0.0-0.0" *) _00_;
  assign _04_ = ~ (* src = "src/alu/arithm/add.v:0.0-0.0" *) _01_;
  assign _05_ = ~ (* src = "src/alu/arithm/add.v:0.0-0.0" *) _02_;
  assign _06_ = a ^ (* src = "src/alu/arithm/add.v:11.8-11.30" *) cin;
  assign _07_ = a ^ (* src = "src/alu/arithm/add.v:14.18-14.23" *) b;
  assign _08_ = _07_ ^ (* src = "src/alu/arithm/add.v:14.18-14.29" *) cin;
  assign line[0] = _03_;
  assign line[1] = _06_;
  assign line[2] = _04_;
  assign cout = _05_;
  assign out = _08_;
endmodule

(* src = "src/alu/arithm/addX.v:6.1-28.10" *)
(* cells_not_processed =  1  *)
(* dynports =  1  *)
(* hdlname = "\\addX" *)
module addX(a, b, cin, out, cout);
  (* src = "src/alu/arithm/addX.v:9.21-9.22" *)
  input [31:0] a;
  wire [31:0] a;
  (* src = "src/alu/arithm/addX.v:9.24-9.25" *)
  input [31:0] b;
  wire [31:0] b;
  (* src = "src/alu/arithm/addX.v:10.15-10.18" *)
  input cin;
  wire cin;
  (* src = "src/alu/arithm/addX.v:13.17-13.21" *)
  output cout;
  wire cout;
  (* src = "src/alu/arithm/addX.v:12.22-12.25" *)
  output [31:0] out;
  wire [31:0] out;
  (* src = "src/alu/arithm/addX.v:15.15-15.18" *)
  wire ret;
  (* module_not_derived = 32'd1 *)
  (* src = "src/alu/arithm/addX.v:19.6-19.41" *)
  add \genblk1.add0  (
    a[0],
    b[0],
    cin,
    out[0],
    ret
  );
  (* module_not_derived = 32'd1 *)
  (* src = "src/alu/arithm/addX.v:20.24-24.15" *)
  addX #(
    .WIRE(32'd31)
  ) \genblk1.recall  (
    a[31:1],
    b[31:1],
    ret,
    out[31:1],
    cout
  );
endmodule
