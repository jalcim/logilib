/**
 * This is an autogenerated netlist code from CircuitVerse. Verilog Code can be
 * tested on https://www.edaplayground.com/ using Icarus Verilog 0.9.7. This is an
 * experimental module and some manual changes make need to be done in order for
 * this to work.
 *
 * If you have any ideas/suggestions or bug fixes, raise an issue
 * on https://github.com/CircuitVerse/CircuitVerse/issues/new/choose
 */

/*
  Element Usage Report
    Input - 243 times
    AndGate - 397 times
    OrGate - 126 times
    Output - 418 times
    XorGate - 147 times
    SubCircuit - 146 times
    Splitter - 98 times
    NandGate - 27 times
    NotGate - 41 times
    NorGate - 30 times
    Multiplexer - 32 times
    DflipFlop - 16 times
    Dlatch - 54 times
    Ground - 22 times
    ConstantVal - 20 times
    Demultiplexer - 10 times
    XnorGate - 8 times
    Clock - 3 times
    Power - 2 times
*/

/*
  Usage Instructions and Tips
    Labels - Ensure unique label names and avoid using verilog keywords
    Warnings - Connect all optional inputs to remove warnings
    Clock - Use a single global clock
*/

// Sample Testbench Code - Uncomment to use

/*
module TestBench();

  reg clk, Write, activate, Read, inp_4, inp_6, inp_10, clk_0, D, C, B, A, H, G, F, E, reset, \R/L , a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, in, inp_0, J, K;
  reg [1:0] inp_11, inp_12, inp_13;
  reg [2:0] inp_5;
  reg [3:0] s0;
  reg [4:0] inp_0, inp_2, inp_3;
  reg [7:0] datain, addr, inp_1, inp_7, inp_8, inp_9, inp_0, A, B, OP, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, in, inp_2, in2, in1;

  wire error, \0 , \1 , \2 , \3 , \4 , \5 , \6 , \7 , \8 , \9 , \10 , \11 , \12 , \13 , \14 , \15 , out_16, out_17, out_18, out_19, out_20, out_21, out_22, out_23, out_24, out_25, out_26, out_27, out_28, out_29, out_30, out_31, out_32, out_33, out_34, out_35, out_36, out_37, out_38, out_39, out_40, out_41, out_42, out_43, out_44, out_45, out_46, out_47, out_48, out_49, out_50, out_51, out_52, out_53, out_54, out_55, out_56, out_57, out_58, out_59, out_60, out_61, out_62, out_63, out_64, out_65, out_66, out_67, out_68, out_69, out_70, out_71, out_72, out_73, out_74, out_75, out_76, out_77, out_78, out_79, out_80, out_81, out_82, out_83, out_84, out_85, out_86, out_87, out_88, out_89, out_90, out_91, out_92, out_93, out_94, out_95, out_96, out_97, out_98, out_99, out_100, out_101, out_102, out_103, out_104, out_105, out_106, out_107, out_108, out_109, out_110, out_111, out_112, out_113, out_114, out_115, out_116, out_117, out_118, out_119, out_120, out_121, out_122, out_123, out_124, out_125, out_126, out_127, out_128, out_129, out_130, out_131, out_132, out_133, out_134, out_135, out_136, out_137, out_138, out_139, out_140, out_141, out_142, out_143, out_144, out_145, out_146, out_147, out_148, out_149, out_150, out_151, out_152, out_153, out_154, out_155, out_156, out_157, out_158, out_159, out_160, out_161, out_162, out_163, out_164, out_165, out_166, out_167, out_168, out_169, out_170, out_171, out_172, out_173, out_174, out_175, out_176, out_177, out_178, out_179, out_180, out_181, out_182, out_183, out_184, out_185, out_186, out_187, out_188, out_189, out_190, out_191, out_192, out_193, out_194, out_195, out_196, out_197, out_198, out_199, out_200, out_201, out_202, out_203, out_204, out_205, out_206, out_207, out_208, out_209, out_210, out_211, out_212, out_213, out_214, out_215, out_216, out_217, out_218, out_219, out_220, out_221, out_222, out_223, out_224, out_225, out_226, out_227, out_228, out_229, out_230, out_231, out_232, out_233, out_234, out_235, out_236, out_237, out_238, out_239, out_240, out_241, out_242, out_243, out_244, out_245, out_246, out_247, out_248, out_249, out_250, out_251, out_252, out_253, out_254, out_255, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, out_0, s1, s2;
  wire [2:0] out_1;
  wire [7:0] dataout, out_0, cpt, out1, S, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, out_1, out2;

  rtl DUT0(dataout, error, clk, Write, datain, activate, addr, addr, Read);

  Main DUT1(clk_0, inp_0, inp_1, inp_2, inp_3, inp_4, inp_5, inp_6, inp_7, inp_8, inp_9, inp_10, inp_11, inp_12, inp_13);

  mux DUT2(\0 , \1 , \2 , \3 , \4 , \5 , \6 , \7 , \8 , \9 , \10 , \11 , \12 , \13 , \14 , \15 , out_16, out_17, out_18, out_19, out_20, out_21, out_22, out_23, out_24, out_25, out_26, out_27, out_28, out_29, out_30, out_31, out_32, out_33, out_34, out_35, out_36, out_37, out_38, out_39, out_40, out_41, out_42, out_43, out_44, out_45, out_46, out_47, out_48, out_49, out_50, out_51, out_52, out_53, out_54, out_55, out_56, out_57, out_58, out_59, out_60, out_61, out_62, out_63, out_64, out_65, out_66, out_67, out_68, out_69, out_70, out_71, out_72, out_73, out_74, out_75, out_76, out_77, out_78, out_79, out_80, out_81, out_82, out_83, out_84, out_85, out_86, out_87, out_88, out_89, out_90, out_91, out_92, out_93, out_94, out_95, out_96, out_97, out_98, out_99, out_100, out_101, out_102, out_103, out_104, out_105, out_106, out_107, out_108, out_109, out_110, out_111, out_112, out_113, out_114, out_115, out_116, out_117, out_118, out_119, out_120, out_121, out_122, out_123, out_124, out_125, out_126, out_127, out_128, out_129, out_130, out_131, out_132, out_133, out_134, out_135, out_136, out_137, out_138, out_139, out_140, out_141, out_142, out_143, out_144, out_145, out_146, out_147, out_148, out_149, out_150, out_151, out_152, out_153, out_154, out_155, out_156, out_157, out_158, out_159, out_160, out_161, out_162, out_163, out_164, out_165, out_166, out_167, out_168, out_169, out_170, out_171, out_172, out_173, out_174, out_175, out_176, out_177, out_178, out_179, out_180, out_181, out_182, out_183, out_184, out_185, out_186, out_187, out_188, out_189, out_190, out_191, out_192, out_193, out_194, out_195, out_196, out_197, out_198, out_199, out_200, out_201, out_202, out_203, out_204, out_205, out_206, out_207, out_208, out_209, out_210, out_211, out_212, out_213, out_214, out_215, out_216, out_217, out_218, out_219, out_220, out_221, out_222, out_223, out_224, out_225, out_226, out_227, out_228, out_229, out_230, out_231, out_232, out_233, out_234, out_235, out_236, out_237, out_238, out_239, out_240, out_241, out_242, out_243, out_244, out_245, out_246, out_247, out_248, out_249, out_250, out_251, out_252, out_253, out_254, out_255, activate, D, C, B, A, H, G, F, E);

  decode DUT3(out_0, inp_0);

  cpt8 DUT4(cpt, activate, clk, reset);

  alucombi DUT5(out1, A, B, OP);

  seq_add DUT6(S, A, \R/L );

  multiplexeur DUT7(z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, s0);

  demultiplexeur DUT8(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, s0, in);

  multiplexeur8 DUT9(out_0, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, s0);

  demultiplexeur8 DUT10(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, in, s0);

  multiplexeur_8bitx2 DUT11(out_0, out_1, inp_0, inp_1, inp_2);

  multboucle DUT12(out_0, out_1, out1, out2, clk_0, in2, in1, activate, reset, clk);

  JKlatchDown DUT13(s1, s2, J, K, clk, reset);

  always begin
    #10
    clk_0 = 0;
    #10
    clk_0 = 1;
  end

  initial begin
    clk = 0;
    Write = 0;
    datain = 0;
    activate = 0;
    addr = 0;
    Read = 0;
    inp_0 = 0;
    inp_1 = 0;
    inp_2 = 0;
    inp_3 = 0;
    inp_4 = 0;
    inp_5 = 0;
    inp_6 = 0;
    inp_7 = 0;
    inp_8 = 0;
    inp_9 = 0;
    inp_10 = 0;
    inp_11 = 0;
    inp_12 = 0;
    inp_13 = 0;
    D = 0;
    C = 0;
    B = 0;
    A = 0;
    H = 0;
    G = 0;
    F = 0;
    E = 0;
    reset = 0;
    OP = 0;
    \R/L  = 0;
    a = 0;
    b = 0;
    c = 0;
    d = 0;
    e = 0;
    f = 0;
    g = 0;
    h = 0;
    i = 0;
    j = 0;
    k = 0;
    l = 0;
    m = 0;
    n = 0;
    o = 0;
    p = 0;
    s0 = 0;
    in = 0;
    in2 = 0;
    in1 = 0;
    J = 0;
    K = 0;

    #15
    $display("dataout = %b", dataout);
    $display("error = %b", error);
    $display("\0  = %b", \0 );
    $display("\1  = %b", \1 );
    $display("\2  = %b", \2 );
    $display("\3  = %b", \3 );
    $display("\4  = %b", \4 );
    $display("\5  = %b", \5 );
    $display("\6  = %b", \6 );
    $display("\7  = %b", \7 );
    $display("\8  = %b", \8 );
    $display("\9  = %b", \9 );
    $display("\10  = %b", \10 );
    $display("\11  = %b", \11 );
    $display("\12  = %b", \12 );
    $display("\13  = %b", \13 );
    $display("\14  = %b", \14 );
    $display("\15  = %b", \15 );
    $display("out_16 = %b", out_16);
    $display("out_17 = %b", out_17);
    $display("out_18 = %b", out_18);
    $display("out_19 = %b", out_19);
    $display("out_20 = %b", out_20);
    $display("out_21 = %b", out_21);
    $display("out_22 = %b", out_22);
    $display("out_23 = %b", out_23);
    $display("out_24 = %b", out_24);
    $display("out_25 = %b", out_25);
    $display("out_26 = %b", out_26);
    $display("out_27 = %b", out_27);
    $display("out_28 = %b", out_28);
    $display("out_29 = %b", out_29);
    $display("out_30 = %b", out_30);
    $display("out_31 = %b", out_31);
    $display("out_32 = %b", out_32);
    $display("out_33 = %b", out_33);
    $display("out_34 = %b", out_34);
    $display("out_35 = %b", out_35);
    $display("out_36 = %b", out_36);
    $display("out_37 = %b", out_37);
    $display("out_38 = %b", out_38);
    $display("out_39 = %b", out_39);
    $display("out_40 = %b", out_40);
    $display("out_41 = %b", out_41);
    $display("out_42 = %b", out_42);
    $display("out_43 = %b", out_43);
    $display("out_44 = %b", out_44);
    $display("out_45 = %b", out_45);
    $display("out_46 = %b", out_46);
    $display("out_47 = %b", out_47);
    $display("out_48 = %b", out_48);
    $display("out_49 = %b", out_49);
    $display("out_50 = %b", out_50);
    $display("out_51 = %b", out_51);
    $display("out_52 = %b", out_52);
    $display("out_53 = %b", out_53);
    $display("out_54 = %b", out_54);
    $display("out_55 = %b", out_55);
    $display("out_56 = %b", out_56);
    $display("out_57 = %b", out_57);
    $display("out_58 = %b", out_58);
    $display("out_59 = %b", out_59);
    $display("out_60 = %b", out_60);
    $display("out_61 = %b", out_61);
    $display("out_62 = %b", out_62);
    $display("out_63 = %b", out_63);
    $display("out_64 = %b", out_64);
    $display("out_65 = %b", out_65);
    $display("out_66 = %b", out_66);
    $display("out_67 = %b", out_67);
    $display("out_68 = %b", out_68);
    $display("out_69 = %b", out_69);
    $display("out_70 = %b", out_70);
    $display("out_71 = %b", out_71);
    $display("out_72 = %b", out_72);
    $display("out_73 = %b", out_73);
    $display("out_74 = %b", out_74);
    $display("out_75 = %b", out_75);
    $display("out_76 = %b", out_76);
    $display("out_77 = %b", out_77);
    $display("out_78 = %b", out_78);
    $display("out_79 = %b", out_79);
    $display("out_80 = %b", out_80);
    $display("out_81 = %b", out_81);
    $display("out_82 = %b", out_82);
    $display("out_83 = %b", out_83);
    $display("out_84 = %b", out_84);
    $display("out_85 = %b", out_85);
    $display("out_86 = %b", out_86);
    $display("out_87 = %b", out_87);
    $display("out_88 = %b", out_88);
    $display("out_89 = %b", out_89);
    $display("out_90 = %b", out_90);
    $display("out_91 = %b", out_91);
    $display("out_92 = %b", out_92);
    $display("out_93 = %b", out_93);
    $display("out_94 = %b", out_94);
    $display("out_95 = %b", out_95);
    $display("out_96 = %b", out_96);
    $display("out_97 = %b", out_97);
    $display("out_98 = %b", out_98);
    $display("out_99 = %b", out_99);
    $display("out_100 = %b", out_100);
    $display("out_101 = %b", out_101);
    $display("out_102 = %b", out_102);
    $display("out_103 = %b", out_103);
    $display("out_104 = %b", out_104);
    $display("out_105 = %b", out_105);
    $display("out_106 = %b", out_106);
    $display("out_107 = %b", out_107);
    $display("out_108 = %b", out_108);
    $display("out_109 = %b", out_109);
    $display("out_110 = %b", out_110);
    $display("out_111 = %b", out_111);
    $display("out_112 = %b", out_112);
    $display("out_113 = %b", out_113);
    $display("out_114 = %b", out_114);
    $display("out_115 = %b", out_115);
    $display("out_116 = %b", out_116);
    $display("out_117 = %b", out_117);
    $display("out_118 = %b", out_118);
    $display("out_119 = %b", out_119);
    $display("out_120 = %b", out_120);
    $display("out_121 = %b", out_121);
    $display("out_122 = %b", out_122);
    $display("out_123 = %b", out_123);
    $display("out_124 = %b", out_124);
    $display("out_125 = %b", out_125);
    $display("out_126 = %b", out_126);
    $display("out_127 = %b", out_127);
    $display("out_128 = %b", out_128);
    $display("out_129 = %b", out_129);
    $display("out_130 = %b", out_130);
    $display("out_131 = %b", out_131);
    $display("out_132 = %b", out_132);
    $display("out_133 = %b", out_133);
    $display("out_134 = %b", out_134);
    $display("out_135 = %b", out_135);
    $display("out_136 = %b", out_136);
    $display("out_137 = %b", out_137);
    $display("out_138 = %b", out_138);
    $display("out_139 = %b", out_139);
    $display("out_140 = %b", out_140);
    $display("out_141 = %b", out_141);
    $display("out_142 = %b", out_142);
    $display("out_143 = %b", out_143);
    $display("out_144 = %b", out_144);
    $display("out_145 = %b", out_145);
    $display("out_146 = %b", out_146);
    $display("out_147 = %b", out_147);
    $display("out_148 = %b", out_148);
    $display("out_149 = %b", out_149);
    $display("out_150 = %b", out_150);
    $display("out_151 = %b", out_151);
    $display("out_152 = %b", out_152);
    $display("out_153 = %b", out_153);
    $display("out_154 = %b", out_154);
    $display("out_155 = %b", out_155);
    $display("out_156 = %b", out_156);
    $display("out_157 = %b", out_157);
    $display("out_158 = %b", out_158);
    $display("out_159 = %b", out_159);
    $display("out_160 = %b", out_160);
    $display("out_161 = %b", out_161);
    $display("out_162 = %b", out_162);
    $display("out_163 = %b", out_163);
    $display("out_164 = %b", out_164);
    $display("out_165 = %b", out_165);
    $display("out_166 = %b", out_166);
    $display("out_167 = %b", out_167);
    $display("out_168 = %b", out_168);
    $display("out_169 = %b", out_169);
    $display("out_170 = %b", out_170);
    $display("out_171 = %b", out_171);
    $display("out_172 = %b", out_172);
    $display("out_173 = %b", out_173);
    $display("out_174 = %b", out_174);
    $display("out_175 = %b", out_175);
    $display("out_176 = %b", out_176);
    $display("out_177 = %b", out_177);
    $display("out_178 = %b", out_178);
    $display("out_179 = %b", out_179);
    $display("out_180 = %b", out_180);
    $display("out_181 = %b", out_181);
    $display("out_182 = %b", out_182);
    $display("out_183 = %b", out_183);
    $display("out_184 = %b", out_184);
    $display("out_185 = %b", out_185);
    $display("out_186 = %b", out_186);
    $display("out_187 = %b", out_187);
    $display("out_188 = %b", out_188);
    $display("out_189 = %b", out_189);
    $display("out_190 = %b", out_190);
    $display("out_191 = %b", out_191);
    $display("out_192 = %b", out_192);
    $display("out_193 = %b", out_193);
    $display("out_194 = %b", out_194);
    $display("out_195 = %b", out_195);
    $display("out_196 = %b", out_196);
    $display("out_197 = %b", out_197);
    $display("out_198 = %b", out_198);
    $display("out_199 = %b", out_199);
    $display("out_200 = %b", out_200);
    $display("out_201 = %b", out_201);
    $display("out_202 = %b", out_202);
    $display("out_203 = %b", out_203);
    $display("out_204 = %b", out_204);
    $display("out_205 = %b", out_205);
    $display("out_206 = %b", out_206);
    $display("out_207 = %b", out_207);
    $display("out_208 = %b", out_208);
    $display("out_209 = %b", out_209);
    $display("out_210 = %b", out_210);
    $display("out_211 = %b", out_211);
    $display("out_212 = %b", out_212);
    $display("out_213 = %b", out_213);
    $display("out_214 = %b", out_214);
    $display("out_215 = %b", out_215);
    $display("out_216 = %b", out_216);
    $display("out_217 = %b", out_217);
    $display("out_218 = %b", out_218);
    $display("out_219 = %b", out_219);
    $display("out_220 = %b", out_220);
    $display("out_221 = %b", out_221);
    $display("out_222 = %b", out_222);
    $display("out_223 = %b", out_223);
    $display("out_224 = %b", out_224);
    $display("out_225 = %b", out_225);
    $display("out_226 = %b", out_226);
    $display("out_227 = %b", out_227);
    $display("out_228 = %b", out_228);
    $display("out_229 = %b", out_229);
    $display("out_230 = %b", out_230);
    $display("out_231 = %b", out_231);
    $display("out_232 = %b", out_232);
    $display("out_233 = %b", out_233);
    $display("out_234 = %b", out_234);
    $display("out_235 = %b", out_235);
    $display("out_236 = %b", out_236);
    $display("out_237 = %b", out_237);
    $display("out_238 = %b", out_238);
    $display("out_239 = %b", out_239);
    $display("out_240 = %b", out_240);
    $display("out_241 = %b", out_241);
    $display("out_242 = %b", out_242);
    $display("out_243 = %b", out_243);
    $display("out_244 = %b", out_244);
    $display("out_245 = %b", out_245);
    $display("out_246 = %b", out_246);
    $display("out_247 = %b", out_247);
    $display("out_248 = %b", out_248);
    $display("out_249 = %b", out_249);
    $display("out_250 = %b", out_250);
    $display("out_251 = %b", out_251);
    $display("out_252 = %b", out_252);
    $display("out_253 = %b", out_253);
    $display("out_254 = %b", out_254);
    $display("out_255 = %b", out_255);
    $display("out_0 = %b", out_0);
    $display("cpt = %b", cpt);
    $display("out1 = %b", out1);
    $display("S = %b", S);
    $display("z = %b", z);
    $display("a = %b", a);
    $display("b = %b", b);
    $display("c = %b", c);
    $display("d = %b", d);
    $display("e = %b", e);
    $display("f = %b", f);
    $display("g = %b", g);
    $display("h = %b", h);
    $display("i = %b", i);
    $display("j = %b", j);
    $display("k = %b", k);
    $display("l = %b", l);
    $display("m = %b", m);
    $display("n = %b", n);
    $display("o = %b", o);
    $display("p = %b", p);
    $display("out_1 = %b", out_1);
    $display("out2 = %b", out2);
    $display("s1 = %b", s1);
    $display("s2 = %b", s2);

    #10
    $display("dataout = %b", dataout);
    $display("error = %b", error);
    $display("\0  = %b", \0 );
    $display("\1  = %b", \1 );
    $display("\2  = %b", \2 );
    $display("\3  = %b", \3 );
    $display("\4  = %b", \4 );
    $display("\5  = %b", \5 );
    $display("\6  = %b", \6 );
    $display("\7  = %b", \7 );
    $display("\8  = %b", \8 );
    $display("\9  = %b", \9 );
    $display("\10  = %b", \10 );
    $display("\11  = %b", \11 );
    $display("\12  = %b", \12 );
    $display("\13  = %b", \13 );
    $display("\14  = %b", \14 );
    $display("\15  = %b", \15 );
    $display("out_16 = %b", out_16);
    $display("out_17 = %b", out_17);
    $display("out_18 = %b", out_18);
    $display("out_19 = %b", out_19);
    $display("out_20 = %b", out_20);
    $display("out_21 = %b", out_21);
    $display("out_22 = %b", out_22);
    $display("out_23 = %b", out_23);
    $display("out_24 = %b", out_24);
    $display("out_25 = %b", out_25);
    $display("out_26 = %b", out_26);
    $display("out_27 = %b", out_27);
    $display("out_28 = %b", out_28);
    $display("out_29 = %b", out_29);
    $display("out_30 = %b", out_30);
    $display("out_31 = %b", out_31);
    $display("out_32 = %b", out_32);
    $display("out_33 = %b", out_33);
    $display("out_34 = %b", out_34);
    $display("out_35 = %b", out_35);
    $display("out_36 = %b", out_36);
    $display("out_37 = %b", out_37);
    $display("out_38 = %b", out_38);
    $display("out_39 = %b", out_39);
    $display("out_40 = %b", out_40);
    $display("out_41 = %b", out_41);
    $display("out_42 = %b", out_42);
    $display("out_43 = %b", out_43);
    $display("out_44 = %b", out_44);
    $display("out_45 = %b", out_45);
    $display("out_46 = %b", out_46);
    $display("out_47 = %b", out_47);
    $display("out_48 = %b", out_48);
    $display("out_49 = %b", out_49);
    $display("out_50 = %b", out_50);
    $display("out_51 = %b", out_51);
    $display("out_52 = %b", out_52);
    $display("out_53 = %b", out_53);
    $display("out_54 = %b", out_54);
    $display("out_55 = %b", out_55);
    $display("out_56 = %b", out_56);
    $display("out_57 = %b", out_57);
    $display("out_58 = %b", out_58);
    $display("out_59 = %b", out_59);
    $display("out_60 = %b", out_60);
    $display("out_61 = %b", out_61);
    $display("out_62 = %b", out_62);
    $display("out_63 = %b", out_63);
    $display("out_64 = %b", out_64);
    $display("out_65 = %b", out_65);
    $display("out_66 = %b", out_66);
    $display("out_67 = %b", out_67);
    $display("out_68 = %b", out_68);
    $display("out_69 = %b", out_69);
    $display("out_70 = %b", out_70);
    $display("out_71 = %b", out_71);
    $display("out_72 = %b", out_72);
    $display("out_73 = %b", out_73);
    $display("out_74 = %b", out_74);
    $display("out_75 = %b", out_75);
    $display("out_76 = %b", out_76);
    $display("out_77 = %b", out_77);
    $display("out_78 = %b", out_78);
    $display("out_79 = %b", out_79);
    $display("out_80 = %b", out_80);
    $display("out_81 = %b", out_81);
    $display("out_82 = %b", out_82);
    $display("out_83 = %b", out_83);
    $display("out_84 = %b", out_84);
    $display("out_85 = %b", out_85);
    $display("out_86 = %b", out_86);
    $display("out_87 = %b", out_87);
    $display("out_88 = %b", out_88);
    $display("out_89 = %b", out_89);
    $display("out_90 = %b", out_90);
    $display("out_91 = %b", out_91);
    $display("out_92 = %b", out_92);
    $display("out_93 = %b", out_93);
    $display("out_94 = %b", out_94);
    $display("out_95 = %b", out_95);
    $display("out_96 = %b", out_96);
    $display("out_97 = %b", out_97);
    $display("out_98 = %b", out_98);
    $display("out_99 = %b", out_99);
    $display("out_100 = %b", out_100);
    $display("out_101 = %b", out_101);
    $display("out_102 = %b", out_102);
    $display("out_103 = %b", out_103);
    $display("out_104 = %b", out_104);
    $display("out_105 = %b", out_105);
    $display("out_106 = %b", out_106);
    $display("out_107 = %b", out_107);
    $display("out_108 = %b", out_108);
    $display("out_109 = %b", out_109);
    $display("out_110 = %b", out_110);
    $display("out_111 = %b", out_111);
    $display("out_112 = %b", out_112);
    $display("out_113 = %b", out_113);
    $display("out_114 = %b", out_114);
    $display("out_115 = %b", out_115);
    $display("out_116 = %b", out_116);
    $display("out_117 = %b", out_117);
    $display("out_118 = %b", out_118);
    $display("out_119 = %b", out_119);
    $display("out_120 = %b", out_120);
    $display("out_121 = %b", out_121);
    $display("out_122 = %b", out_122);
    $display("out_123 = %b", out_123);
    $display("out_124 = %b", out_124);
    $display("out_125 = %b", out_125);
    $display("out_126 = %b", out_126);
    $display("out_127 = %b", out_127);
    $display("out_128 = %b", out_128);
    $display("out_129 = %b", out_129);
    $display("out_130 = %b", out_130);
    $display("out_131 = %b", out_131);
    $display("out_132 = %b", out_132);
    $display("out_133 = %b", out_133);
    $display("out_134 = %b", out_134);
    $display("out_135 = %b", out_135);
    $display("out_136 = %b", out_136);
    $display("out_137 = %b", out_137);
    $display("out_138 = %b", out_138);
    $display("out_139 = %b", out_139);
    $display("out_140 = %b", out_140);
    $display("out_141 = %b", out_141);
    $display("out_142 = %b", out_142);
    $display("out_143 = %b", out_143);
    $display("out_144 = %b", out_144);
    $display("out_145 = %b", out_145);
    $display("out_146 = %b", out_146);
    $display("out_147 = %b", out_147);
    $display("out_148 = %b", out_148);
    $display("out_149 = %b", out_149);
    $display("out_150 = %b", out_150);
    $display("out_151 = %b", out_151);
    $display("out_152 = %b", out_152);
    $display("out_153 = %b", out_153);
    $display("out_154 = %b", out_154);
    $display("out_155 = %b", out_155);
    $display("out_156 = %b", out_156);
    $display("out_157 = %b", out_157);
    $display("out_158 = %b", out_158);
    $display("out_159 = %b", out_159);
    $display("out_160 = %b", out_160);
    $display("out_161 = %b", out_161);
    $display("out_162 = %b", out_162);
    $display("out_163 = %b", out_163);
    $display("out_164 = %b", out_164);
    $display("out_165 = %b", out_165);
    $display("out_166 = %b", out_166);
    $display("out_167 = %b", out_167);
    $display("out_168 = %b", out_168);
    $display("out_169 = %b", out_169);
    $display("out_170 = %b", out_170);
    $display("out_171 = %b", out_171);
    $display("out_172 = %b", out_172);
    $display("out_173 = %b", out_173);
    $display("out_174 = %b", out_174);
    $display("out_175 = %b", out_175);
    $display("out_176 = %b", out_176);
    $display("out_177 = %b", out_177);
    $display("out_178 = %b", out_178);
    $display("out_179 = %b", out_179);
    $display("out_180 = %b", out_180);
    $display("out_181 = %b", out_181);
    $display("out_182 = %b", out_182);
    $display("out_183 = %b", out_183);
    $display("out_184 = %b", out_184);
    $display("out_185 = %b", out_185);
    $display("out_186 = %b", out_186);
    $display("out_187 = %b", out_187);
    $display("out_188 = %b", out_188);
    $display("out_189 = %b", out_189);
    $display("out_190 = %b", out_190);
    $display("out_191 = %b", out_191);
    $display("out_192 = %b", out_192);
    $display("out_193 = %b", out_193);
    $display("out_194 = %b", out_194);
    $display("out_195 = %b", out_195);
    $display("out_196 = %b", out_196);
    $display("out_197 = %b", out_197);
    $display("out_198 = %b", out_198);
    $display("out_199 = %b", out_199);
    $display("out_200 = %b", out_200);
    $display("out_201 = %b", out_201);
    $display("out_202 = %b", out_202);
    $display("out_203 = %b", out_203);
    $display("out_204 = %b", out_204);
    $display("out_205 = %b", out_205);
    $display("out_206 = %b", out_206);
    $display("out_207 = %b", out_207);
    $display("out_208 = %b", out_208);
    $display("out_209 = %b", out_209);
    $display("out_210 = %b", out_210);
    $display("out_211 = %b", out_211);
    $display("out_212 = %b", out_212);
    $display("out_213 = %b", out_213);
    $display("out_214 = %b", out_214);
    $display("out_215 = %b", out_215);
    $display("out_216 = %b", out_216);
    $display("out_217 = %b", out_217);
    $display("out_218 = %b", out_218);
    $display("out_219 = %b", out_219);
    $display("out_220 = %b", out_220);
    $display("out_221 = %b", out_221);
    $display("out_222 = %b", out_222);
    $display("out_223 = %b", out_223);
    $display("out_224 = %b", out_224);
    $display("out_225 = %b", out_225);
    $display("out_226 = %b", out_226);
    $display("out_227 = %b", out_227);
    $display("out_228 = %b", out_228);
    $display("out_229 = %b", out_229);
    $display("out_230 = %b", out_230);
    $display("out_231 = %b", out_231);
    $display("out_232 = %b", out_232);
    $display("out_233 = %b", out_233);
    $display("out_234 = %b", out_234);
    $display("out_235 = %b", out_235);
    $display("out_236 = %b", out_236);
    $display("out_237 = %b", out_237);
    $display("out_238 = %b", out_238);
    $display("out_239 = %b", out_239);
    $display("out_240 = %b", out_240);
    $display("out_241 = %b", out_241);
    $display("out_242 = %b", out_242);
    $display("out_243 = %b", out_243);
    $display("out_244 = %b", out_244);
    $display("out_245 = %b", out_245);
    $display("out_246 = %b", out_246);
    $display("out_247 = %b", out_247);
    $display("out_248 = %b", out_248);
    $display("out_249 = %b", out_249);
    $display("out_250 = %b", out_250);
    $display("out_251 = %b", out_251);
    $display("out_252 = %b", out_252);
    $display("out_253 = %b", out_253);
    $display("out_254 = %b", out_254);
    $display("out_255 = %b", out_255);
    $display("out_0 = %b", out_0);
    $display("cpt = %b", cpt);
    $display("out1 = %b", out1);
    $display("S = %b", S);
    $display("z = %b", z);
    $display("a = %b", a);
    $display("b = %b", b);
    $display("c = %b", c);
    $display("d = %b", d);
    $display("e = %b", e);
    $display("f = %b", f);
    $display("g = %b", g);
    $display("h = %b", h);
    $display("i = %b", i);
    $display("j = %b", j);
    $display("k = %b", k);
    $display("l = %b", l);
    $display("m = %b", m);
    $display("n = %b", n);
    $display("o = %b", o);
    $display("p = %b", p);
    $display("out_1 = %b", out_1);
    $display("out2 = %b", out2);
    $display("s1 = %b", s1);
    $display("s2 = %b", s2);

    $finish;

  end
endmodule

*/

module add(c, reto, A, reti, b);
  output c,  reto;
  input A, reti, b;
  wire and_1_out, or_0_out, xor_1_out, and_0_out, xor_0_out;
  assign and_1_out = A & b;
  assign or_0_out = and_0_out | and_1_out;
  assign reto = or_0_out;
  assign xor_1_out = A ^ b;
  assign and_0_out = xor_1_out & reti;
  assign xor_0_out = reti ^ xor_1_out;
  assign c = xor_0_out;
endmodule


module add8(C, Cout, \add/sub , B, A, Cin);
  output Cout;
  output [7:0] C;
  input \add/sub , Cin;
  input [7:0] B, A;
  wire or_0_out, add_0_out_0, add_0_out_1, add_1_out_0, add_1_out_1, add_2_out_0, add_2_out_1, add_3_out_0, add_3_out_1, add_4_out_0, add_4_out_1, add_5_out_0, add_5_out_1, add_6_out_0, add_6_out_1, add_7_out_0, add_7_out_1, xor_7_out, xor_6_out, xor_5_out, xor_4_out, xor_3_out, xor_2_out, xor_1_out, xor_0_out;
  wire [7:0] Splitter_2_cmb;
  assign or_0_out = Cin | \add/sub ;
  add add_0(add_0_out_0, add_0_out_1, A[0], or_0_out, xor_0_out);
  add add_1(add_1_out_0, add_1_out_1, A[1], add_0_out_1, xor_1_out);
  add add_2(add_2_out_0, add_2_out_1, A[2], add_1_out_1, xor_2_out);
  add add_3(add_3_out_0, add_3_out_1, A[3], add_2_out_1, xor_3_out);
  add add_4(add_4_out_0, add_4_out_1, A[4], add_3_out_1, xor_4_out);
  add add_5(add_5_out_0, add_5_out_1, A[5], add_4_out_1, xor_5_out);
  add add_6(add_6_out_0, add_6_out_1, A[6], add_5_out_1, xor_6_out);
  add add_7(add_7_out_0, add_7_out_1, A[7], add_6_out_1, xor_7_out);
  assign Cout = add_7_out_1;
  assign Splitter_2_cmb = {add_7_out_0,add_6_out_0,add_5_out_0,add_4_out_0,add_3_out_0,add_2_out_0,add_1_out_0,add_0_out_0};
  assign C = Splitter_2_cmb;
  
  
  assign xor_7_out = B[7] ^ \add/sub ;
  assign xor_6_out = B[6] ^ \add/sub ;
  assign xor_5_out = B[5] ^ \add/sub ;
  assign xor_4_out = B[4] ^ \add/sub ;
  assign xor_3_out = B[3] ^ \add/sub ;
  assign xor_2_out = B[2] ^ \add/sub ;
  assign xor_1_out = B[1] ^ \add/sub ;
  assign xor_0_out = B[0] ^ \add/sub ;
endmodule

module basculeD(s1, s2, a, clk, reset);
  output s1,  s2;
  input a, clk, reset;
  wire or_0_out, nand_0_out, nand_1_out, xor_0_out, and_0_out, nand_2_out, not_0_out, nand_3_out;
  assign or_0_out = nand_1_out | reset;
  assign nand_0_out = ~(nand_2_out & or_0_out);
  assign s1 = nand_0_out;
  assign nand_1_out = ~(nand_0_out & nand_3_out);
  assign s2 = nand_1_out;
  assign xor_0_out = a ^ reset;
  assign and_0_out = a & xor_0_out;
  assign nand_2_out = ~(and_0_out & clk);
  assign not_0_out = ~and_0_out;
  assign nand_3_out = ~(clk & not_0_out);
endmodule


module dflipflop(S1, S2, A, clk, reset);
  output S1,  S2;
  input A, clk, reset;
  wire basculeD_1_out_0, basculeD_1_out_1, basculeD_0_out_0, basculeD_0_out_1, not_0_out;
  basculeD basculeD_1(basculeD_1_out_0, basculeD_1_out_1, basculeD_0_out_0, not_0_out, reset);
  assign S2 = basculeD_1_out_1;
  assign S1 = basculeD_1_out_0;
  basculeD basculeD_0(basculeD_0_out_0, basculeD_0_out_1, A, clk, reset);
  assign not_0_out = ~clk;
endmodule



module cpt(cpt, activate, clk, reset);
  output [2:0] cpt;
  input activate, clk, reset;
  wire dflipflop_0_out_0, dflipflop_0_out_1, nor_0_out, and_1_out, or_0_out, and_0_out, dflipflop_1_out_0, dflipflop_1_out_1, dflipflop_2_out_0, dflipflop_2_out_1, not_0_out;
  wire [2:0] Splitter_0_cmb;
  dflipflop dflipflop_0(dflipflop_0_out_0, dflipflop_0_out_1, and_0_out, clk, reset);
  assign Splitter_0_cmb = {dflipflop_2_out_0,dflipflop_1_out_0,dflipflop_0_out_0};
  assign cpt = Splitter_0_cmb;
  assign nor_0_out = ~(dflipflop_1_out_0 | dflipflop_0_out_0);
  assign and_1_out = not_0_out & nor_0_out;
  assign or_0_out = and_1_out | dflipflop_2_out_0;
  assign and_0_out = activate & or_0_out;
  dflipflop dflipflop_1(dflipflop_1_out_0, dflipflop_1_out_1, dflipflop_0_out_0, clk, reset);
  dflipflop dflipflop_2(dflipflop_2_out_0, dflipflop_2_out_1, dflipflop_1_out_0, clk, reset);
  assign not_0_out = ~dflipflop_2_out_0;
endmodule


module basculeD8(s1, s2, clk, reset, a);
  output [7:0] s1, s2;
  input clk, reset;
  input [7:0] a;
  wire basculeD_7_out_0, basculeD_7_out_1, basculeD_6_out_0, basculeD_6_out_1, basculeD_5_out_0, basculeD_5_out_1, basculeD_4_out_0, basculeD_4_out_1, basculeD_3_out_0, basculeD_3_out_1, basculeD_2_out_0, basculeD_2_out_1, basculeD_1_out_0, basculeD_1_out_1, basculeD_0_out_0, basculeD_0_out_1;
  wire [7:0] Splitter_2_cmb, Splitter_1_cmb;
  
  basculeD basculeD_7(basculeD_7_out_0, basculeD_7_out_1, a[7], clk, reset);
  assign Splitter_2_cmb = {basculeD_7_out_1,basculeD_6_out_1,basculeD_5_out_1,basculeD_4_out_1,basculeD_3_out_1,basculeD_2_out_1,basculeD_1_out_1,basculeD_0_out_1};
  assign s2 = Splitter_2_cmb;
  assign Splitter_1_cmb = {basculeD_7_out_0,basculeD_6_out_0,basculeD_5_out_0,basculeD_4_out_0,basculeD_3_out_0,basculeD_2_out_0,basculeD_1_out_0,basculeD_0_out_0};
  assign s1 = Splitter_1_cmb;
  basculeD basculeD_6(basculeD_6_out_0, basculeD_6_out_1, a[6], clk, reset);
  basculeD basculeD_5(basculeD_5_out_0, basculeD_5_out_1, a[5], clk, reset);
  basculeD basculeD_4(basculeD_4_out_0, basculeD_4_out_1, a[4], clk, reset);
  basculeD basculeD_3(basculeD_3_out_0, basculeD_3_out_1, a[3], clk, reset);
  basculeD basculeD_2(basculeD_2_out_0, basculeD_2_out_1, a[2], clk, reset);
  basculeD basculeD_1(basculeD_1_out_0, basculeD_1_out_1, a[1], clk, reset);
  basculeD basculeD_0(basculeD_0_out_0, basculeD_0_out_1, a[0], clk, reset);
endmodule





module divmod2(div2, outerr, mod2, end, A, activate, clk, reset);
  output mod2,  end;
  output [2:0] outerr;
  output [7:0] div2;
  input activate, clk, reset;
  input [7:0] A;
  wire Multiplexer_0_out, DflipFlop_0_Q, and_7_out, Multiplexer_1_out, DflipFlop_1_Q, and_6_out, Multiplexer_2_out, DflipFlop_2_Q, and_5_out, Multiplexer_3_out, DflipFlop_3_Q, and_4_out, Multiplexer_4_out, DflipFlop_4_Q, and_3_out, Multiplexer_5_out, DflipFlop_5_Q, and_2_out, Multiplexer_6_out, DflipFlop_6_Q, and_1_out, Multiplexer_7_out, DflipFlop_7_Q, Multiplexer_8_out, DflipFlop_8_Q, and_8_out, Dlatch_1_Q, and_0_out, Ground_0_out;
  wire [2:0] cpt_0_out;
  wire [7:0] basculeD8_1_out_0, basculeD8_1_out_1, Splitter_1_cmb, Dlatch_0_Q;
  basculeD8 basculeD8_1(basculeD8_1_out_0, basculeD8_1_out_1, activate, reset, A);
  
  Multiplexer4 Multiplexer_0(Multiplexer_0_out, DflipFlop_0_Q, basculeD8_1_out_0[7], Ground_0_out, Ground_0_out, cpt_0_out[1:0]);
  DflipFlop DflipFlop_0(DflipFlop_0_Q, , clk, Multiplexer_0_out, reset, , );
  assign and_7_out = DflipFlop_0_Q & cpt_0_out[2];
  assign Splitter_1_cmb = {and_7_out,and_6_out,and_5_out,and_4_out,and_3_out,and_2_out,and_1_out,and_0_out};
  Dlatch #(8) Dlatch_0(Dlatch_0_Q, , cpt_0_out[2], Splitter_1_cmb);
  assign div2 = Dlatch_0_Q;
  Multiplexer4 Multiplexer_1(Multiplexer_1_out, DflipFlop_1_Q, basculeD8_1_out_0[6], DflipFlop_0_Q, Ground_0_out, cpt_0_out[1:0]);
  DflipFlop DflipFlop_1(DflipFlop_1_Q, , clk, Multiplexer_1_out, reset, , );
  assign and_6_out = DflipFlop_1_Q & cpt_0_out[2];
  Multiplexer4 Multiplexer_2(Multiplexer_2_out, DflipFlop_2_Q, basculeD8_1_out_0[5], DflipFlop_1_Q, Ground_0_out, cpt_0_out[1:0]);
  DflipFlop DflipFlop_2(DflipFlop_2_Q, , clk, Multiplexer_2_out, reset, , );
  assign and_5_out = DflipFlop_2_Q & cpt_0_out[2];
  Multiplexer4 Multiplexer_3(Multiplexer_3_out, DflipFlop_3_Q, basculeD8_1_out_0[4], DflipFlop_2_Q, Ground_0_out, cpt_0_out[1:0]);
  DflipFlop DflipFlop_3(DflipFlop_3_Q, , clk, Multiplexer_3_out, reset, , );
  assign and_4_out = DflipFlop_3_Q & cpt_0_out[2];
  Multiplexer4 Multiplexer_4(Multiplexer_4_out, DflipFlop_4_Q, basculeD8_1_out_0[3], DflipFlop_3_Q, Ground_0_out, cpt_0_out[1:0]);
  DflipFlop DflipFlop_4(DflipFlop_4_Q, , clk, Multiplexer_4_out, reset, , );
  assign and_3_out = DflipFlop_4_Q & cpt_0_out[2];
  Multiplexer4 Multiplexer_5(Multiplexer_5_out, DflipFlop_5_Q, basculeD8_1_out_0[2], DflipFlop_4_Q, Ground_0_out, cpt_0_out[1:0]);
  DflipFlop DflipFlop_5(DflipFlop_5_Q, , clk, Multiplexer_5_out, reset, , );
  assign and_2_out = DflipFlop_5_Q & cpt_0_out[2];
  Multiplexer4 Multiplexer_6(Multiplexer_6_out, DflipFlop_6_Q, basculeD8_1_out_0[1], DflipFlop_5_Q, Ground_0_out, cpt_0_out[1:0]);
  DflipFlop DflipFlop_6(DflipFlop_6_Q, , clk, Multiplexer_6_out, reset, , );
  assign and_1_out = DflipFlop_6_Q & cpt_0_out[2];
  Multiplexer4 Multiplexer_7(Multiplexer_7_out, DflipFlop_7_Q, basculeD8_1_out_0[0], DflipFlop_6_Q, Ground_0_out, cpt_0_out[1:0]);
  DflipFlop DflipFlop_7(DflipFlop_7_Q, , clk, Multiplexer_7_out, reset, , );
  Multiplexer4 Multiplexer_8(Multiplexer_8_out, DflipFlop_8_Q, Ground_0_out, DflipFlop_7_Q, Ground_0_out, cpt_0_out[1:0]);
  DflipFlop DflipFlop_8(DflipFlop_8_Q, , clk, Multiplexer_8_out, reset, , );
  assign and_8_out = DflipFlop_8_Q & cpt_0_out[2];
  Dlatch Dlatch_1(Dlatch_1_Q, , cpt_0_out[2], and_8_out);
  assign mod2 = Dlatch_1_Q;
  assign and_0_out = DflipFlop_7_Q & cpt_0_out[2];
  cpt cpt_0(cpt_0_out, activate, clk, reset);
  assign outerr = cpt_0_out;
  
  assign end = cpt_0_out[2];
  assign Ground_0_out = 1'b0;
endmodule








module mult8opti(div, mod, outerr, debug, end, B, C, activate, clk, reset, A);
  output mod,  end;
  output [2:0] outerr;
  output [7:0] div, debug;
  input activate, clk, reset, A;
  input [7:0] B, C;
  wire add8_0_out_1, divmod2_1_out_2, divmod2_1_out_3, and_0_out, Ground_0_out;
  wire [2:0] divmod2_1_out_1;
  wire [7:0] Multiplexer_0_out, add8_0_out_0, basculeD8_2_out_0, basculeD8_2_out_1, divmod2_1_out_0, const_0;
  Multiplexer2 #(8) Multiplexer_0(Multiplexer_0_out, const_0, B, A);
  add8 add8_0(add8_0_out_0, add8_0_out_1, Ground_0_out, C, Multiplexer_0_out, Ground_0_out);
  basculeD8 basculeD8_2(basculeD8_2_out_0, basculeD8_2_out_1, and_0_out, reset, add8_0_out_0);
  divmod2 divmod2_1(divmod2_1_out_0, divmod2_1_out_1, divmod2_1_out_2, divmod2_1_out_3, basculeD8_2_out_0, activate, clk, reset);
  assign end = divmod2_1_out_3;
  assign mod = divmod2_1_out_2;
  assign outerr = divmod2_1_out_1;
  assign div = divmod2_1_out_0;
  assign debug = basculeD8_2_out_0;
  assign and_0_out = activate & clk;
  assign const_0 = 8'b00000000;
  assign Ground_0_out = 1'b0;
endmodule

module interrupteur_8bit(dataout, \on/off , datain);
  output [7:0] dataout;
  input \on/off ;
  input [7:0] datain;
  wire and_1_out, const_0;
  wire [7:0] and_0_out, Splitter_0_cmb;
  assign and_0_out = datain & Splitter_0_cmb;
  assign dataout = and_0_out;
  assign and_1_out = \on/off  & const_0;
  assign Splitter_0_cmb = {and_1_out,and_1_out,and_1_out,and_1_out,and_1_out,and_1_out,and_1_out,and_1_out};
  assign const_0 = 1'b1;
endmodule










module mult8(debug_div, out_1, out_2, out_3, out_4, out_5, out_6, out_7, C, B, A, activate, clk, reset);
  output [7:0] debug_div, out_1, out_2, out_3, out_4, out_5, out_6, out_7, C;
  input activate, clk, reset;
  input [7:0] B, A;
  wire mult8opti_7_out_1, mult8opti_7_out_4, mult8opti_6_out_1, mult8opti_6_out_4, mult8opti_5_out_1, mult8opti_5_out_4, mult8opti_4_out_1, mult8opti_4_out_4, mult8opti_3_out_1, mult8opti_3_out_4, mult8opti_2_out_1, mult8opti_2_out_4, mult8opti_1_out_1, mult8opti_1_out_4, mult8opti_0_out_1, mult8opti_0_out_4;
  wire [2:0] mult8opti_7_out_2, mult8opti_6_out_2, mult8opti_5_out_2, mult8opti_4_out_2, mult8opti_3_out_2, mult8opti_2_out_2, mult8opti_1_out_2, mult8opti_0_out_2;
  wire [7:0] mult8opti_7_out_0, mult8opti_7_out_3, interrupteur_8bit_8_out, Splitter_1_cmb, mult8opti_6_out_0, mult8opti_6_out_3, mult8opti_5_out_0, mult8opti_5_out_3, mult8opti_4_out_0, mult8opti_4_out_3, mult8opti_3_out_0, mult8opti_3_out_3, mult8opti_2_out_0, mult8opti_2_out_3, mult8opti_1_out_0, mult8opti_1_out_3, mult8opti_0_out_0, mult8opti_0_out_3, const_0;
  mult8opti mult8opti_7(mult8opti_7_out_0, mult8opti_7_out_1, mult8opti_7_out_2, mult8opti_7_out_3, mult8opti_7_out_4, B, mult8opti_6_out_0, mult8opti_6_out_4, clk, reset, A[7]);
  interrupteur_8bit interrupteur_8bit_8(interrupteur_8bit_8_out, mult8opti_7_out_4, Splitter_1_cmb);
  assign C = interrupteur_8bit_8_out;
  assign Splitter_1_cmb = {mult8opti_7_out_1,mult8opti_6_out_1,mult8opti_5_out_1,mult8opti_4_out_1,mult8opti_3_out_1,mult8opti_2_out_1,mult8opti_1_out_1,mult8opti_0_out_1};
  assign debug_div = mult8opti_7_out_0;
  mult8opti mult8opti_6(mult8opti_6_out_0, mult8opti_6_out_1, mult8opti_6_out_2, mult8opti_6_out_3, mult8opti_6_out_4, B, mult8opti_5_out_0, mult8opti_5_out_4, clk, reset, A[6]);
  assign out_7 = mult8opti_6_out_0;
  mult8opti mult8opti_5(mult8opti_5_out_0, mult8opti_5_out_1, mult8opti_5_out_2, mult8opti_5_out_3, mult8opti_5_out_4, B, mult8opti_4_out_0, mult8opti_4_out_4, clk, reset, A[5]);
  assign out_6 = mult8opti_5_out_0;
  mult8opti mult8opti_4(mult8opti_4_out_0, mult8opti_4_out_1, mult8opti_4_out_2, mult8opti_4_out_3, mult8opti_4_out_4, B, mult8opti_3_out_0, mult8opti_3_out_4, clk, reset, A[4]);
  assign out_5 = mult8opti_4_out_0;
  mult8opti mult8opti_3(mult8opti_3_out_0, mult8opti_3_out_1, mult8opti_3_out_2, mult8opti_3_out_3, mult8opti_3_out_4, B, mult8opti_2_out_0, mult8opti_2_out_4, clk, reset, A[3]);
  assign out_4 = mult8opti_3_out_0;
  mult8opti mult8opti_2(mult8opti_2_out_0, mult8opti_2_out_1, mult8opti_2_out_2, mult8opti_2_out_3, mult8opti_2_out_4, B, mult8opti_1_out_0, mult8opti_1_out_4, clk, reset, A[2]);
  assign out_3 = mult8opti_2_out_0;
  mult8opti mult8opti_1(mult8opti_1_out_0, mult8opti_1_out_1, mult8opti_1_out_2, mult8opti_1_out_3, mult8opti_1_out_4, B, mult8opti_0_out_0, mult8opti_0_out_4, clk, reset, A[1]);
  assign out_2 = mult8opti_1_out_0;
  mult8opti mult8opti_0(mult8opti_0_out_0, mult8opti_0_out_1, mult8opti_0_out_2, mult8opti_0_out_3, mult8opti_0_out_4, B, const_0, activate, clk, reset, A[0]);
  assign out_1 = mult8opti_0_out_0;
  
  assign const_0 = 8'b00000000;
endmodule

module and8(C, A, B);
  output [7:0] C;
  input [7:0] A, B;
  wire and_7_out, and_6_out, and_5_out, and_4_out, and_3_out, and_2_out, and_1_out, and_0_out;
  wire [7:0] Splitter_2_cmb;
  
  assign and_7_out = B[7] & A[7];
  assign Splitter_2_cmb = {and_7_out,and_6_out,and_5_out,and_4_out,and_3_out,and_2_out,and_1_out,and_0_out};
  assign C = Splitter_2_cmb;
  assign and_6_out = B[6] & A[6];
  assign and_5_out = B[5] & A[5];
  assign and_4_out = B[4] & A[4];
  assign and_3_out = B[3] & A[3];
  assign and_2_out = B[2] & A[2];
  assign and_1_out = B[1] & A[1];
  assign and_0_out = B[0] & A[0];
  
endmodule

module or8(C, A, B);
  output [7:0] C;
  input [7:0] A, B;
  wire or_7_out, or_6_out, or_5_out, or_4_out, or_3_out, or_2_out, or_1_out, or_0_out;
  wire [7:0] Splitter_2_cmb;
  
  assign or_7_out = B[7] | A[7];
  assign Splitter_2_cmb = {or_7_out,or_6_out,or_5_out,or_4_out,or_3_out,or_2_out,or_1_out,or_0_out};
  assign C = Splitter_2_cmb;
  assign or_6_out = B[6] | A[6];
  assign or_5_out = B[5] | A[5];
  assign or_4_out = B[4] | A[4];
  assign or_3_out = B[3] | A[3];
  assign or_2_out = B[2] | A[2];
  assign or_1_out = B[1] | A[1];
  assign or_0_out = B[0] | A[0];
  
endmodule

module xor8(C, A, B);
  output [7:0] C;
  input [7:0] A, B;
  wire xor_7_out, xor_6_out, xor_5_out, xor_4_out, xor_0_out, xor_1_out, xor_2_out, xor_3_out;
  wire [7:0] Splitter_2_cmb;
  
  assign xor_7_out = B[7] ^ A[7];
  assign Splitter_2_cmb = {xor_7_out,xor_6_out,xor_5_out,xor_4_out,xor_0_out,xor_1_out,xor_2_out,xor_3_out};
  assign C = Splitter_2_cmb;
  assign xor_6_out = B[6] ^ A[6];
  assign xor_5_out = B[5] ^ A[5];
  assign xor_4_out = B[4] ^ A[4];
  assign xor_0_out = B[3] ^ A[3];
  assign xor_1_out = B[2] ^ A[2];
  assign xor_2_out = B[1] ^ A[1];
  assign xor_3_out = B[0] ^ A[0];
  
endmodule

module cmp(C, D, B, A);
  output C,  D;
  input B, A;
  wire and_1_out, not_0_out, and_0_out, not_1_out;
  assign and_1_out = not_1_out & A;
  assign D = and_1_out;
  assign not_0_out = ~A;
  assign and_0_out = B & not_0_out;
  assign C = and_0_out;
  assign not_1_out = ~B;
endmodule


module cmp8(I, J, K, A, B);
  output I,  J,  K;
  input [7:0] A, B;
  wire cmp_7_out_0, cmp_7_out_1, nor_7_out, and_7_out, nor_8_out, and_6_out, or_6_out, cmp_6_out_0, cmp_6_out_1, nor_6_out, and_5_out, or_5_out, cmp_5_out_0, cmp_5_out_1, nor_5_out, and_4_out, or_4_out, cmp_4_out_0, cmp_4_out_1, nor_4_out, and_3_out, or_3_out, cmp_3_out_0, cmp_3_out_1, nor_3_out, and_2_out, or_2_out, cmp_2_out_0, cmp_2_out_1, nor_2_out, and_1_out, or_1_out, cmp_1_out_0, cmp_1_out_1, nor_1_out, and_0_out, or_0_out, cmp_0_out_0, cmp_0_out_1, nor_0_out;
  
  cmp cmp_7(cmp_7_out_0, cmp_7_out_1, A[7], B[7]);
  assign nor_7_out = ~(cmp_7_out_0 | cmp_7_out_1);
  assign and_7_out = nor_3_out & nor_2_out & nor_1_out & nor_0_out & nor_4_out & nor_5_out & nor_6_out & nor_7_out;
  assign I = and_7_out;
  assign nor_8_out = ~(and_7_out | or_6_out);
  assign J = nor_8_out;
  assign and_6_out = or_5_out & nor_7_out;
  assign or_6_out = and_6_out | cmp_7_out_0;
  assign K = or_6_out;
  cmp cmp_6(cmp_6_out_0, cmp_6_out_1, A[6], B[6]);
  assign nor_6_out = ~(cmp_6_out_0 | cmp_6_out_1);
  assign and_5_out = or_4_out & nor_6_out;
  assign or_5_out = and_5_out | cmp_6_out_0;
  cmp cmp_5(cmp_5_out_0, cmp_5_out_1, A[5], B[5]);
  assign nor_5_out = ~(cmp_5_out_0 | cmp_5_out_1);
  assign and_4_out = or_3_out & nor_5_out;
  assign or_4_out = and_4_out | cmp_5_out_0;
  cmp cmp_4(cmp_4_out_0, cmp_4_out_1, A[4], B[4]);
  assign nor_4_out = ~(cmp_4_out_0 | cmp_4_out_1);
  assign and_3_out = or_2_out & nor_4_out;
  assign or_3_out = and_3_out | cmp_4_out_0;
  cmp cmp_3(cmp_3_out_0, cmp_3_out_1, A[3], B[3]);
  assign nor_3_out = ~(cmp_3_out_0 | cmp_3_out_1);
  assign and_2_out = or_1_out & nor_3_out;
  assign or_2_out = and_2_out | cmp_3_out_0;
  cmp cmp_2(cmp_2_out_0, cmp_2_out_1, A[2], B[2]);
  assign nor_2_out = ~(cmp_2_out_0 | cmp_2_out_1);
  assign and_1_out = or_0_out & nor_2_out;
  assign or_1_out = and_1_out | cmp_2_out_0;
  cmp cmp_1(cmp_1_out_0, cmp_1_out_1, A[1], B[1]);
  assign nor_1_out = ~(cmp_1_out_0 | cmp_1_out_1);
  assign and_0_out = cmp_0_out_0 & nor_1_out;
  assign or_0_out = and_0_out | cmp_1_out_0;
  cmp cmp_0(cmp_0_out_0, cmp_0_out_1, A[0], B[0]);
  assign nor_0_out = ~(cmp_0_out_0 | cmp_0_out_1);
  
endmodule

module mem(dataout, error, datain, addrin, Write, activate, addrout, read, clk);
  output error;
  output [7:0] dataout;
  input Write, activate, read, clk;
  input [3:0] addrin, addrout;
  input [7:0] datain;
  wire and_1_out, or_1_out, or_2_out, not_0_out, and_17_out, nor_2_out, or_6_out, and_24_out, and_25_out, and_27_out, not_1_out, and_23_out, and_18_out, and_22_out, nor_3_out, or_5_out, and_21_out, nor_0_out, or_4_out, and_20_out, nor_1_out, or_3_out, and_19_out, Demultiplexer_0_out_0, Demultiplexer_0_out_1, Demultiplexer_0_out_2, Demultiplexer_0_out_3, Demultiplexer_0_out_4, Demultiplexer_0_out_5, Demultiplexer_0_out_6, Demultiplexer_0_out_7, Demultiplexer_0_out_8, Demultiplexer_0_out_9, Demultiplexer_0_out_10, Demultiplexer_0_out_11, Demultiplexer_0_out_12, Demultiplexer_0_out_13, Demultiplexer_0_out_14, Demultiplexer_0_out_15, and_16_out, or_0_out, and_15_out, and_14_out, and_13_out, and_12_out, and_11_out, and_10_out, and_9_out, and_8_out, and_7_out, and_6_out, and_5_out, and_4_out, and_3_out, and_2_out, and_26_out, and_0_out;
  wire [3:0] Dlatch_16_Q, Dlatch_17_Q;
  wire [7:0] Multiplexer_1_out, Multiplexer_2_out, Dlatch_5_Q, Multiplexer_0_out, Dlatch_4_Q, Dlatch_3_Q, Dlatch_2_Q, Dlatch_0_Q, Dlatch_1_Q, Dlatch_6_Q, Dlatch_7_Q, Dlatch_13_Q, Dlatch_12_Q, Dlatch_11_Q, Dlatch_10_Q, Dlatch_8_Q, Dlatch_9_Q, Dlatch_14_Q, Dlatch_15_Q, const_0;
  assign and_1_out = Demultiplexer_0_out_0 & clk;
  assign or_1_out = and_8_out | and_7_out | and_6_out | and_5_out | and_4_out | and_3_out | and_2_out | and_1_out;
  assign or_2_out = or_0_out | or_1_out;
  assign not_0_out = ~or_2_out;
  assign and_17_out = clk & not_0_out;
  Dlatch #(4) Dlatch_16(Dlatch_16_Q, , and_17_out, addrin);
  
  assign nor_2_out = ~(Dlatch_17_Q[3] | Dlatch_16_Q[3]);
  assign or_6_out = and_22_out | nor_2_out;
  assign and_24_out = or_5_out & or_6_out & or_4_out & or_3_out;
  assign and_25_out = activate & and_24_out;
  assign and_27_out = and_26_out & and_25_out;
  assign not_1_out = ~and_27_out;
  assign and_23_out = read & not_1_out;
  assign and_18_out = activate & and_23_out;
  Multiplexer2 #(8) Multiplexer_1(Multiplexer_1_out, const_0, Multiplexer_0_out, and_18_out);
  Multiplexer2 #(8) Multiplexer_2(Multiplexer_2_out, const_0, Multiplexer_1_out, clk);
  assign dataout = Multiplexer_2_out;
  assign error = and_27_out;
  assign and_22_out = Dlatch_17_Q[3] & Dlatch_16_Q[3];
  assign nor_3_out = ~(Dlatch_17_Q[2] | Dlatch_16_Q[2]);
  assign or_5_out = and_21_out | nor_3_out;
  assign and_21_out = Dlatch_17_Q[2] & Dlatch_16_Q[2];
  assign nor_0_out = ~(Dlatch_17_Q[1] | Dlatch_16_Q[1]);
  assign or_4_out = and_20_out | nor_0_out;
  assign and_20_out = Dlatch_17_Q[1] & Dlatch_16_Q[1];
  assign nor_1_out = ~(Dlatch_17_Q[0] | Dlatch_16_Q[0]);
  assign or_3_out = and_19_out | nor_1_out;
  assign and_19_out = Dlatch_17_Q[0] & Dlatch_16_Q[0];
  Demultiplexer16 Demultiplexer_0(Demultiplexer_0_out_0, Demultiplexer_0_out_1, Demultiplexer_0_out_2, Demultiplexer_0_out_3, Demultiplexer_0_out_4, Demultiplexer_0_out_5, Demultiplexer_0_out_6, Demultiplexer_0_out_7, Demultiplexer_0_out_8, Demultiplexer_0_out_9, Demultiplexer_0_out_10, Demultiplexer_0_out_11, Demultiplexer_0_out_12, Demultiplexer_0_out_13, Demultiplexer_0_out_14, Demultiplexer_0_out_15, and_0_out, Dlatch_16_Q);
  assign and_16_out = Demultiplexer_0_out_15 & clk;
  assign or_0_out = and_16_out | and_15_out | and_14_out | and_13_out | and_12_out | and_11_out | and_10_out | and_9_out;
  Dlatch #(8) Dlatch_5(Dlatch_5_Q, , and_16_out, datain);
  Multiplexer16 #(8) Multiplexer_0(Multiplexer_0_out, Dlatch_15_Q, Dlatch_14_Q, Dlatch_9_Q, Dlatch_8_Q, Dlatch_10_Q, Dlatch_11_Q, Dlatch_12_Q, Dlatch_13_Q, Dlatch_7_Q, Dlatch_6_Q, Dlatch_1_Q, Dlatch_0_Q, Dlatch_2_Q, Dlatch_3_Q, Dlatch_4_Q, Dlatch_5_Q, Dlatch_17_Q);
  assign and_15_out = Demultiplexer_0_out_14 & clk;
  Dlatch #(8) Dlatch_4(Dlatch_4_Q, , and_15_out, datain);
  assign and_14_out = Demultiplexer_0_out_13 & clk;
  Dlatch #(8) Dlatch_3(Dlatch_3_Q, , and_14_out, datain);
  assign and_13_out = Demultiplexer_0_out_12 & clk;
  Dlatch #(8) Dlatch_2(Dlatch_2_Q, , and_13_out, datain);
  assign and_12_out = Demultiplexer_0_out_11 & clk;
  Dlatch #(8) Dlatch_0(Dlatch_0_Q, , and_12_out, datain);
  assign and_11_out = Demultiplexer_0_out_10 & clk;
  Dlatch #(8) Dlatch_1(Dlatch_1_Q, , and_11_out, datain);
  assign and_10_out = Demultiplexer_0_out_9 & clk;
  Dlatch #(8) Dlatch_6(Dlatch_6_Q, , and_10_out, datain);
  assign and_9_out = Demultiplexer_0_out_8 & clk;
  Dlatch #(8) Dlatch_7(Dlatch_7_Q, , and_9_out, datain);
  assign and_8_out = Demultiplexer_0_out_7 & clk;
  Dlatch #(8) Dlatch_13(Dlatch_13_Q, , and_8_out, datain);
  assign and_7_out = Demultiplexer_0_out_6 & clk;
  Dlatch #(8) Dlatch_12(Dlatch_12_Q, , and_7_out, datain);
  assign and_6_out = Demultiplexer_0_out_5 & clk;
  Dlatch #(8) Dlatch_11(Dlatch_11_Q, , and_6_out, datain);
  assign and_5_out = Demultiplexer_0_out_4 & clk;
  Dlatch #(8) Dlatch_10(Dlatch_10_Q, , and_5_out, datain);
  assign and_4_out = Demultiplexer_0_out_3 & clk;
  Dlatch #(8) Dlatch_8(Dlatch_8_Q, , and_4_out, datain);
  assign and_3_out = Demultiplexer_0_out_2 & clk;
  Dlatch #(8) Dlatch_9(Dlatch_9_Q, , and_3_out, datain);
  assign and_2_out = Demultiplexer_0_out_1 & clk;
  Dlatch #(8) Dlatch_14(Dlatch_14_Q, , and_2_out, datain);
  Dlatch #(8) Dlatch_15(Dlatch_15_Q, , and_1_out, datain);
  Dlatch #(4) Dlatch_17(Dlatch_17_Q, , clk, addrout);
  
  assign and_26_out = read & Write;
  assign and_0_out = Write & activate;
  assign const_0 = 8'b00000000;
endmodule

module mempath(\0 , \1 , \2 , \3 , activate, B, A);
  output \0 ,  \1 ,  \2 ,  \3 ;
  input activate, B, A;
  wire nand_0_out, and_4_out, and_8_out, and_1_out, and_7_out, and_2_out, and_3_out, and_6_out, and_0_out, and_5_out, not_0_out, not_1_out, const_0;
  assign nand_0_out = ~(const_0 & A);
  assign and_4_out = not_1_out & nand_0_out;
  assign and_8_out = activate & and_4_out;
  assign \3  = and_8_out;
  assign and_1_out = nand_0_out & B;
  assign and_7_out = activate & and_1_out;
  assign \2  = and_7_out;
  assign and_2_out = A & const_0;
  assign and_3_out = not_0_out & and_2_out;
  assign and_6_out = activate & and_3_out;
  assign \1  = and_6_out;
  assign and_0_out = and_2_out & B;
  assign and_5_out = activate & and_0_out;
  assign \0  = and_5_out;
  assign not_0_out = ~B;
  assign not_1_out = ~B;
  assign const_0 = 1'b1;
endmodule

module ctrlpath(addrout, addrin, datain, write, read, activate, addrout, addrin, datain, activR, activW, write, read);
  output write,  read,  activate;
  output [3:0] addrout, addrin;
  output [7:0] datain;
  input activR, activW, write, read;
  input [3:0] addrout, addrin;
  input [7:0] datain;
  wire and_1_out, or_0_out, and_0_out;
  wire [3:0] Multiplexer_1_out, Multiplexer_0_out, const_0;
  wire [7:0] Multiplexer_2_out, const_1;
  assign and_1_out = activR & read;
  assign read = and_1_out;
  assign or_0_out = and_0_out | and_1_out;
  assign activate = or_0_out;
  assign and_0_out = activW & write;
  assign write = and_0_out;
  Multiplexer2 #(8) Multiplexer_2(Multiplexer_2_out, const_1, datain, activW);
  assign datain = Multiplexer_2_out;
  Multiplexer2 #(4) Multiplexer_1(Multiplexer_1_out, const_0, addrin, activW);
  assign addrin = Multiplexer_1_out;
  Multiplexer2 #(4) Multiplexer_0(Multiplexer_0_out, const_0, addrout, activR);
  assign addrout = Multiplexer_0_out;
  assign const_1 = 8'b00000000;
  assign const_0 = 4'b0000;
endmodule




module mem6(dataout, error, addrin, clk, Read, datain, addrout, activate, Write);
  output error;
  output [7:0] dataout;
  input clk, Read, activate, Write;
  input [5:0] addrin, addrout;
  input [7:0] datain;
  wire ctrlpath_9_out_3, ctrlpath_9_out_4, ctrlpath_9_out_5, mem_3_out_1, or_1_out, ctrlpath_8_out_3, ctrlpath_8_out_4, ctrlpath_8_out_5, mem_2_out_1, ctrlpath_7_out_3, ctrlpath_7_out_4, ctrlpath_7_out_5, mem_1_out_1, ctrlpath_6_out_3, ctrlpath_6_out_4, ctrlpath_6_out_5, mem_0_out_1, mempath_5_out_0, mempath_5_out_1, mempath_5_out_2, mempath_5_out_3, mempath_4_out_0, mempath_4_out_1, mempath_4_out_2, mempath_4_out_3;
  wire [3:0] ctrlpath_9_out_0, ctrlpath_9_out_1, ctrlpath_8_out_0, ctrlpath_8_out_1, ctrlpath_7_out_0, ctrlpath_7_out_1, ctrlpath_6_out_0, ctrlpath_6_out_1;
  wire [7:0] ctrlpath_9_out_2, mem_3_out_0, or_0_out, ctrlpath_8_out_2, mem_2_out_0, ctrlpath_7_out_2, mem_1_out_0, ctrlpath_6_out_2, mem_0_out_0;
  ctrlpath ctrlpath_9(ctrlpath_9_out_0, ctrlpath_9_out_1, ctrlpath_9_out_2, ctrlpath_9_out_3, ctrlpath_9_out_4, ctrlpath_9_out_5, addrout[3:0], addrin[3:0], datain, mempath_5_out_3, mempath_4_out_3, Write, Read);
  mem mem_3(mem_3_out_0, mem_3_out_1, ctrlpath_9_out_2, ctrlpath_9_out_1, ctrlpath_9_out_3, ctrlpath_9_out_5, ctrlpath_9_out_0, ctrlpath_9_out_4, clk);
  assign or_1_out = mem_0_out_1 | mem_1_out_1 | mem_2_out_1 | mem_3_out_1;
  assign error = or_1_out;
  assign or_0_out = mem_0_out_0 | mem_1_out_0 | mem_2_out_0 | mem_3_out_0;
  assign dataout = or_0_out;
  ctrlpath ctrlpath_8(ctrlpath_8_out_0, ctrlpath_8_out_1, ctrlpath_8_out_2, ctrlpath_8_out_3, ctrlpath_8_out_4, ctrlpath_8_out_5, addrout[3:0], addrin[3:0], datain, mempath_5_out_2, mempath_4_out_2, Write, Read);
  mem mem_2(mem_2_out_0, mem_2_out_1, ctrlpath_8_out_2, ctrlpath_8_out_1, ctrlpath_8_out_3, ctrlpath_8_out_5, ctrlpath_8_out_0, ctrlpath_8_out_4, clk);
  ctrlpath ctrlpath_7(ctrlpath_7_out_0, ctrlpath_7_out_1, ctrlpath_7_out_2, ctrlpath_7_out_3, ctrlpath_7_out_4, ctrlpath_7_out_5, addrout[3:0], addrin[3:0], datain, mempath_5_out_1, mempath_4_out_1, Write, Read);
  mem mem_1(mem_1_out_0, mem_1_out_1, ctrlpath_7_out_2, ctrlpath_7_out_1, ctrlpath_7_out_3, ctrlpath_7_out_5, ctrlpath_7_out_0, ctrlpath_7_out_4, clk);
  ctrlpath ctrlpath_6(ctrlpath_6_out_0, ctrlpath_6_out_1, ctrlpath_6_out_2, ctrlpath_6_out_3, ctrlpath_6_out_4, ctrlpath_6_out_5, addrout[3:0], addrin[3:0], datain, mempath_5_out_0, mempath_4_out_0, Write, Read);
  mem mem_0(mem_0_out_0, mem_0_out_1, ctrlpath_6_out_2, ctrlpath_6_out_1, ctrlpath_6_out_3, ctrlpath_6_out_5, ctrlpath_6_out_0, ctrlpath_6_out_4, clk);
  mempath mempath_5(mempath_5_out_0, mempath_5_out_1, mempath_5_out_2, mempath_5_out_3, activate, addrout[4], addrout[5]);
  mempath mempath_4(mempath_4_out_0, mempath_4_out_1, mempath_4_out_2, mempath_4_out_3, activate, addrin[4], addrin[5]);
  
  
endmodule

module ctrlpath2(addrout, addrin, datain, write, read, activate, addrout, addrin, datain, activR, activW, write, read);
  output write,  read,  activate;
  output [5:0] addrout, addrin;
  output [7:0] datain;
  input activR, activW, write, read;
  input [5:0] addrout, addrin;
  input [7:0] datain;
  wire and_1_out, or_0_out, and_0_out;
  wire [5:0] Multiplexer_1_out, Multiplexer_0_out, const_0;
  wire [7:0] Multiplexer_2_out, const_1;
  assign and_1_out = activR & read;
  assign read = and_1_out;
  assign or_0_out = and_0_out | and_1_out;
  assign activate = or_0_out;
  assign and_0_out = activW & write;
  assign write = and_0_out;
  Multiplexer2 #(8) Multiplexer_2(Multiplexer_2_out, const_1, datain, activW);
  assign datain = Multiplexer_2_out;
  Multiplexer2 #(6) Multiplexer_1(Multiplexer_1_out, const_0, addrin, activW);
  assign addrin = Multiplexer_1_out;
  Multiplexer2 #(6) Multiplexer_0(Multiplexer_0_out, const_0, addrout, activR);
  assign addrout = Multiplexer_0_out;
  assign const_1 = 8'b00000000;
  assign const_0 = 6'b000000;
endmodule






module mem8(dataout, error, addrout, clk, Write, datain, activate, addrin, Read);
  output error;
  output [7:0] dataout;
  input clk, Write, activate, Read;
  input [7:0] addrout, datain, addrin;
  wire ctrlpath2_7_out_3, ctrlpath2_7_out_4, ctrlpath2_7_out_5, mem6_3_out_1, or_0_out, ctrlpath2_6_out_3, ctrlpath2_6_out_4, ctrlpath2_6_out_5, mem6_2_out_1, ctrlpath2_5_out_3, ctrlpath2_5_out_4, ctrlpath2_5_out_5, mem6_1_out_1, ctrlpath2_4_out_3, ctrlpath2_4_out_4, ctrlpath2_4_out_5, mem6_0_out_1, mempath_9_out_0, mempath_9_out_1, mempath_9_out_2, mempath_9_out_3, mempath_8_out_0, mempath_8_out_1, mempath_8_out_2, mempath_8_out_3, not_0_out;
  wire [5:0] ctrlpath2_7_out_0, ctrlpath2_7_out_1, ctrlpath2_6_out_0, ctrlpath2_6_out_1, ctrlpath2_5_out_0, ctrlpath2_5_out_1, ctrlpath2_4_out_0, ctrlpath2_4_out_1;
  wire [7:0] ctrlpath2_7_out_2, mem6_3_out_0, or_1_out, DflipFlop_0_Q, ctrlpath2_6_out_2, mem6_2_out_0, ctrlpath2_5_out_2, mem6_1_out_0, ctrlpath2_4_out_2, mem6_0_out_0;
  ctrlpath2 ctrlpath2_7(ctrlpath2_7_out_0, ctrlpath2_7_out_1, ctrlpath2_7_out_2, ctrlpath2_7_out_3, ctrlpath2_7_out_4, ctrlpath2_7_out_5, addrout[5:0], addrin[5:0], datain, mempath_8_out_3, mempath_9_out_3, Write, Read);
  mem6 mem6_3(mem6_3_out_0, mem6_3_out_1, ctrlpath2_7_out_1, clk, ctrlpath2_7_out_4, ctrlpath2_7_out_2, ctrlpath2_7_out_0, ctrlpath2_7_out_5, ctrlpath2_7_out_3);
  assign or_0_out = mem6_0_out_1 | mem6_1_out_1 | mem6_2_out_1 | mem6_3_out_1;
  assign error = or_0_out;
  assign or_1_out = mem6_0_out_0 | mem6_1_out_0 | mem6_2_out_0 | mem6_3_out_0;
  DflipFlop #(8) DflipFlop_0(DflipFlop_0_Q, , not_0_out, or_1_out, , , );
  assign dataout = DflipFlop_0_Q;
  ctrlpath2 ctrlpath2_6(ctrlpath2_6_out_0, ctrlpath2_6_out_1, ctrlpath2_6_out_2, ctrlpath2_6_out_3, ctrlpath2_6_out_4, ctrlpath2_6_out_5, addrout[5:0], addrin[5:0], datain, mempath_8_out_2, mempath_9_out_2, Write, Read);
  mem6 mem6_2(mem6_2_out_0, mem6_2_out_1, ctrlpath2_6_out_1, clk, ctrlpath2_6_out_4, ctrlpath2_6_out_2, ctrlpath2_6_out_0, ctrlpath2_6_out_5, ctrlpath2_6_out_3);
  ctrlpath2 ctrlpath2_5(ctrlpath2_5_out_0, ctrlpath2_5_out_1, ctrlpath2_5_out_2, ctrlpath2_5_out_3, ctrlpath2_5_out_4, ctrlpath2_5_out_5, addrout[5:0], addrin[5:0], datain, mempath_8_out_1, mempath_9_out_1, Write, Read);
  mem6 mem6_1(mem6_1_out_0, mem6_1_out_1, ctrlpath2_5_out_1, clk, ctrlpath2_5_out_4, ctrlpath2_5_out_2, ctrlpath2_5_out_0, ctrlpath2_5_out_5, ctrlpath2_5_out_3);
  ctrlpath2 ctrlpath2_4(ctrlpath2_4_out_0, ctrlpath2_4_out_1, ctrlpath2_4_out_2, ctrlpath2_4_out_3, ctrlpath2_4_out_4, ctrlpath2_4_out_5, addrout[5:0], addrin[5:0], datain, mempath_8_out_0, mempath_9_out_0, Write, Read);
  mem6 mem6_0(mem6_0_out_0, mem6_0_out_1, ctrlpath2_4_out_1, clk, ctrlpath2_4_out_4, ctrlpath2_4_out_2, ctrlpath2_4_out_0, ctrlpath2_4_out_5, ctrlpath2_4_out_3);
  
  mempath mempath_9(mempath_9_out_0, mempath_9_out_1, mempath_9_out_2, mempath_9_out_3, activate, addrin[6], addrin[7]);
  mempath mempath_8(mempath_8_out_0, mempath_8_out_1, mempath_8_out_2, mempath_8_out_3, activate, addrout[6], addrout[7]);
  assign not_0_out = ~clk;
  
endmodule







module rtl(dataout, error, clk, Write, datain, activate, addr, addr, Read);
  output error;
  output [7:0] dataout;
  input clk, Write, activate, Read;
  input [7:0] datain, addr, addr;
  wire mem8_0_out_1;
  wire [7:0] mem8_0_out_0;
  mem8 mem8_0(mem8_0_out_0, mem8_0_out_1, addr, clk, Write, datain, activate, addr, Read);
  assign error = mem8_0_out_1;
  assign dataout = mem8_0_out_0;
endmodule

module mult8combi(out8, overflow16, out16, A, B);
  output [7:0] out8, overflow16;
  output [15:0] out16;
  input [7:0] A, B;
  wire and_47_out, and_109_out, or_22_out, and_110_out, or_23_out, and_165_out, or_50_out, and_183_out, or_59_out, and_184_out, or_60_out, and_186_out, or_61_out, xor_127_out, xor_125_out, xor_123_out, xor_120_out, and_182_out, xor_121_out, xor_102_out, and_164_out, xor_103_out, and_181_out, or_58_out, xor_118_out, and_180_out, xor_119_out, xor_47_out, and_163_out, or_49_out, xor_100_out, and_162_out, xor_101_out, and_179_out, or_57_out, xor_116_out, and_178_out, xor_117_out, xor_44_out, and_108_out, xor_45_out, xor_98_out, and_160_out, or_48_out, xor_99_out, and_177_out, or_56_out, xor_114_out, and_176_out, xor_115_out, and_161_out, and_63_out, and_125_out, or_30_out, and_126_out, or_31_out, xor_63_out, and_159_out, or_47_out, xor_96_out, and_158_out, xor_97_out, and_175_out, or_55_out, xor_112_out, and_174_out, xor_113_out, xor_60_out, and_124_out, xor_61_out, and_157_out, or_46_out, xor_94_out, and_156_out, xor_95_out, and_173_out, or_54_out, xor_110_out, and_172_out, xor_111_out, and_55_out, and_127_out, xor_62_out, and_39_out, and_111_out, xor_46_out, and_31_out, and_93_out, or_14_out, and_94_out, or_15_out, and_143_out, or_39_out, and_144_out, or_40_out, xor_83_out, xor_126_out, xor_81_out, and_187_out, xor_124_out, xor_78_out, and_142_out, xor_79_out, and_185_out, xor_122_out, xor_31_out, and_141_out, or_38_out, xor_76_out, and_140_out, xor_77_out, xor_28_out, and_92_out, xor_29_out, and_139_out, or_37_out, xor_74_out, and_138_out, xor_75_out, and_23_out, and_95_out, xor_30_out, and_15_out, and_77_out, or_6_out, and_78_out, or_7_out, xor_82_out, xor_15_out, and_145_out, xor_80_out, xor_12_out, and_76_out, xor_13_out, and_0_out, and_79_out, xor_14_out, and_62_out, and_123_out, or_29_out, xor_58_out, and_122_out, xor_59_out, and_155_out, or_45_out, xor_92_out, and_154_out, xor_93_out, and_171_out, or_53_out, xor_108_out, and_170_out, xor_109_out, and_54_out, and_46_out, and_107_out, or_21_out, xor_42_out, and_106_out, xor_43_out, and_38_out, and_30_out, and_91_out, or_13_out, xor_26_out, and_90_out, xor_27_out, and_137_out, or_36_out, xor_72_out, and_136_out, xor_73_out, and_22_out, and_14_out, and_75_out, or_5_out, xor_10_out, and_74_out, xor_11_out, and_1_out, and_61_out, and_121_out, or_28_out, xor_56_out, and_120_out, xor_57_out, and_153_out, or_44_out, xor_90_out, and_152_out, xor_91_out, and_169_out, or_52_out, xor_106_out, and_168_out, xor_107_out, and_53_out, and_45_out, and_105_out, or_20_out, xor_40_out, and_104_out, xor_41_out, and_37_out, and_29_out, and_89_out, or_12_out, xor_24_out, and_88_out, xor_25_out, and_135_out, or_35_out, xor_70_out, and_134_out, xor_71_out, and_21_out, and_13_out, and_73_out, or_4_out, xor_8_out, and_72_out, xor_9_out, and_2_out, and_60_out, and_119_out, or_27_out, xor_54_out, and_118_out, xor_55_out, and_151_out, or_43_out, xor_88_out, and_150_out, xor_89_out, and_167_out, or_51_out, xor_104_out, and_166_out, xor_105_out, and_52_out, and_44_out, and_103_out, or_19_out, xor_38_out, and_102_out, xor_39_out, and_36_out, and_28_out, and_87_out, or_11_out, xor_22_out, and_86_out, xor_23_out, and_133_out, or_34_out, xor_68_out, and_132_out, xor_69_out, and_20_out, and_12_out, and_71_out, or_3_out, xor_6_out, and_70_out, xor_7_out, and_3_out, and_59_out, and_117_out, or_26_out, xor_52_out, and_116_out, xor_53_out, and_149_out, or_42_out, xor_86_out, and_148_out, xor_87_out, and_51_out, and_43_out, and_101_out, or_18_out, xor_36_out, and_100_out, xor_37_out, and_35_out, and_27_out, and_85_out, or_10_out, xor_20_out, and_84_out, xor_21_out, and_131_out, or_33_out, xor_66_out, and_130_out, xor_67_out, and_19_out, and_11_out, and_69_out, or_2_out, xor_4_out, and_68_out, xor_5_out, and_4_out, and_58_out, and_115_out, or_25_out, xor_50_out, and_114_out, xor_51_out, and_147_out, or_41_out, xor_84_out, and_146_out, xor_85_out, and_50_out, and_42_out, and_99_out, or_17_out, xor_34_out, and_98_out, xor_35_out, and_34_out, and_26_out, and_83_out, or_9_out, xor_18_out, and_82_out, xor_19_out, and_129_out, or_32_out, xor_64_out, and_128_out, xor_65_out, and_18_out, and_10_out, and_67_out, or_1_out, xor_2_out, and_66_out, xor_3_out, and_5_out, and_57_out, and_113_out, or_24_out, xor_48_out, and_112_out, xor_49_out, and_49_out, and_41_out, and_97_out, or_16_out, xor_32_out, and_96_out, xor_33_out, and_33_out, and_25_out, and_81_out, or_8_out, xor_16_out, and_80_out, xor_17_out, and_17_out, and_9_out, and_65_out, or_0_out, xor_0_out, and_64_out, xor_1_out, and_6_out, and_56_out, and_48_out, and_40_out, and_32_out, and_24_out, and_16_out, and_8_out, and_7_out, Ground_17_out, Ground_16_out, Ground_15_out, Ground_14_out, Ground_13_out, Ground_12_out, Ground_11_out, Ground_10_out, Ground_9_out, Ground_8_out, Ground_7_out, Ground_6_out, Ground_5_out, Ground_4_out, Ground_3_out, Ground_2_out, Ground_1_out, Ground_0_out;
  wire [7:0] Splitter_2_cmb, Splitter_1_cmb;
  wire [15:0] Splitter_4_cmb;
  
  assign and_47_out = B[7] & A[2];
  assign and_109_out = and_47_out & and_38_out;
  assign or_22_out = and_109_out | and_108_out;
  assign and_110_out = or_22_out & xor_46_out;
  assign or_23_out = and_111_out | and_110_out;
  assign and_165_out = Ground_12_out & or_23_out;
  assign or_50_out = and_165_out | and_164_out;
  assign and_183_out = xor_77_out & or_50_out;
  assign or_59_out = and_183_out | and_182_out;
  assign and_184_out = or_59_out & xor_122_out;
  assign or_60_out = and_185_out | and_184_out;
  assign and_186_out = or_60_out & xor_124_out;
  assign or_61_out = and_187_out | and_186_out;
  assign xor_127_out = xor_126_out ^ or_61_out;
  assign Splitter_2_cmb = {xor_127_out,xor_125_out,xor_123_out,xor_121_out,xor_119_out,xor_117_out,xor_115_out,xor_113_out};
  assign Splitter_4_cmb = {Splitter_2_cmb,Splitter_1_cmb};
  assign out16 = Splitter_4_cmb;
  assign overflow16 = Splitter_2_cmb;
  assign xor_125_out = xor_124_out ^ or_60_out;
  assign xor_123_out = xor_122_out ^ or_59_out;
  assign xor_120_out = xor_77_out ^ or_50_out;
  assign and_182_out = or_58_out & xor_120_out;
  assign xor_121_out = xor_120_out ^ or_58_out;
  assign xor_102_out = Ground_12_out ^ or_23_out;
  assign and_164_out = or_49_out & xor_102_out;
  assign xor_103_out = xor_102_out ^ or_49_out;
  assign and_181_out = xor_75_out & xor_103_out;
  assign or_58_out = and_181_out | and_180_out;
  assign xor_118_out = xor_75_out ^ xor_103_out;
  assign and_180_out = or_57_out & xor_118_out;
  assign xor_119_out = xor_118_out ^ or_57_out;
  assign xor_47_out = xor_46_out ^ or_22_out;
  assign and_163_out = Ground_13_out & xor_47_out;
  assign or_49_out = and_163_out | and_162_out;
  assign xor_100_out = Ground_13_out ^ xor_47_out;
  assign and_162_out = or_48_out & xor_100_out;
  assign xor_101_out = xor_100_out ^ or_48_out;
  assign and_179_out = xor_73_out & xor_101_out;
  assign or_57_out = and_179_out | and_178_out;
  assign xor_116_out = xor_73_out ^ xor_101_out;
  assign and_178_out = or_56_out & xor_116_out;
  assign xor_117_out = xor_116_out ^ or_56_out;
  assign xor_44_out = and_47_out ^ and_38_out;
  assign and_108_out = or_21_out & xor_44_out;
  assign xor_45_out = xor_44_out ^ or_21_out;
  assign xor_98_out = xor_45_out ^ or_31_out;
  assign and_160_out = or_47_out & xor_98_out;
  assign or_48_out = and_161_out | and_160_out;
  assign xor_99_out = xor_98_out ^ or_47_out;
  assign and_177_out = xor_71_out & xor_99_out;
  assign or_56_out = and_177_out | and_176_out;
  assign xor_114_out = xor_71_out ^ xor_99_out;
  assign and_176_out = or_55_out & xor_114_out;
  assign xor_115_out = xor_114_out ^ or_55_out;
  assign and_161_out = xor_45_out & or_31_out;
  assign and_63_out = B[7] & A[0];
  assign and_125_out = and_63_out & and_54_out;
  assign or_30_out = and_125_out | and_124_out;
  assign and_126_out = or_30_out & xor_62_out;
  assign or_31_out = and_127_out | and_126_out;
  assign xor_63_out = xor_62_out ^ or_30_out;
  assign and_159_out = xor_43_out & xor_63_out;
  assign or_47_out = and_159_out | and_158_out;
  assign xor_96_out = xor_43_out ^ xor_63_out;
  assign and_158_out = or_46_out & xor_96_out;
  assign xor_97_out = xor_96_out ^ or_46_out;
  assign and_175_out = xor_69_out & xor_97_out;
  assign or_55_out = and_175_out | and_174_out;
  assign xor_112_out = xor_69_out ^ xor_97_out;
  assign and_174_out = or_54_out & xor_112_out;
  assign xor_113_out = xor_112_out ^ or_54_out;
  assign xor_60_out = and_63_out ^ and_54_out;
  assign and_124_out = or_29_out & xor_60_out;
  assign xor_61_out = xor_60_out ^ or_29_out;
  assign and_157_out = xor_41_out & xor_61_out;
  assign or_46_out = and_157_out | and_156_out;
  assign xor_94_out = xor_41_out ^ xor_61_out;
  assign and_156_out = or_45_out & xor_94_out;
  assign xor_95_out = xor_94_out ^ or_45_out;
  assign and_173_out = xor_67_out & xor_95_out;
  assign or_54_out = and_173_out | and_172_out;
  assign xor_110_out = xor_67_out ^ xor_95_out;
  assign and_172_out = or_53_out & xor_110_out;
  assign xor_111_out = xor_110_out ^ or_53_out;
  assign Splitter_1_cmb = {xor_111_out,xor_109_out,xor_107_out,xor_105_out,xor_87_out,xor_85_out,xor_49_out,and_56_out};
  assign out8 = Splitter_1_cmb;
  assign and_55_out = B[7] & A[1];
  assign and_127_out = Ground_7_out & and_55_out;
  assign xor_62_out = Ground_7_out ^ and_55_out;
  assign and_39_out = B[7] & A[3];
  assign and_111_out = Ground_5_out & and_39_out;
  assign xor_46_out = Ground_5_out ^ and_39_out;
  assign and_31_out = B[7] & A[4];
  assign and_93_out = and_31_out & and_22_out;
  assign or_14_out = and_93_out | and_92_out;
  assign and_94_out = or_14_out & xor_30_out;
  assign or_15_out = and_95_out | and_94_out;
  assign and_143_out = xor_13_out & or_15_out;
  assign or_39_out = and_143_out | and_142_out;
  assign and_144_out = or_39_out & xor_80_out;
  assign or_40_out = and_145_out | and_144_out;
  assign xor_83_out = xor_82_out ^ or_40_out;
  assign xor_126_out = Ground_16_out ^ xor_83_out;
  assign xor_81_out = xor_80_out ^ or_39_out;
  assign and_187_out = Ground_17_out & xor_81_out;
  assign xor_124_out = Ground_17_out ^ xor_81_out;
  assign xor_78_out = xor_13_out ^ or_15_out;
  assign and_142_out = or_38_out & xor_78_out;
  assign xor_79_out = xor_78_out ^ or_38_out;
  assign and_185_out = Ground_15_out & xor_79_out;
  assign xor_122_out = Ground_15_out ^ xor_79_out;
  assign xor_31_out = xor_30_out ^ or_14_out;
  assign and_141_out = xor_11_out & xor_31_out;
  assign or_38_out = and_141_out | and_140_out;
  assign xor_76_out = xor_11_out ^ xor_31_out;
  assign and_140_out = or_37_out & xor_76_out;
  assign xor_77_out = xor_76_out ^ or_37_out;
  assign xor_28_out = and_31_out ^ and_22_out;
  assign and_92_out = or_13_out & xor_28_out;
  assign xor_29_out = xor_28_out ^ or_13_out;
  assign and_139_out = xor_9_out & xor_29_out;
  assign or_37_out = and_139_out | and_138_out;
  assign xor_74_out = xor_9_out ^ xor_29_out;
  assign and_138_out = or_36_out & xor_74_out;
  assign xor_75_out = xor_74_out ^ or_36_out;
  assign and_23_out = B[7] & A[5];
  assign and_95_out = Ground_3_out & and_23_out;
  assign xor_30_out = Ground_3_out ^ and_23_out;
  assign and_15_out = B[7] & A[6];
  assign and_77_out = and_15_out & and_1_out;
  assign or_6_out = and_77_out | and_76_out;
  assign and_78_out = or_6_out & xor_14_out;
  assign or_7_out = and_79_out | and_78_out;
  assign xor_82_out = Ground_9_out ^ or_7_out;
  assign xor_15_out = xor_14_out ^ or_6_out;
  assign and_145_out = Ground_10_out & xor_15_out;
  assign xor_80_out = Ground_10_out ^ xor_15_out;
  assign xor_12_out = and_15_out ^ and_1_out;
  assign and_76_out = or_5_out & xor_12_out;
  assign xor_13_out = xor_12_out ^ or_5_out;
  assign and_0_out = B[7] & A[7];
  assign and_79_out = Ground_1_out & and_0_out;
  assign xor_14_out = Ground_1_out ^ and_0_out;
  assign and_62_out = B[6] & A[0];
  assign and_123_out = and_62_out & and_53_out;
  assign or_29_out = and_123_out | and_122_out;
  assign xor_58_out = and_62_out ^ and_53_out;
  assign and_122_out = or_28_out & xor_58_out;
  assign xor_59_out = xor_58_out ^ or_28_out;
  assign and_155_out = xor_39_out & xor_59_out;
  assign or_45_out = and_155_out | and_154_out;
  assign xor_92_out = xor_39_out ^ xor_59_out;
  assign and_154_out = or_44_out & xor_92_out;
  assign xor_93_out = xor_92_out ^ or_44_out;
  assign and_171_out = xor_65_out & xor_93_out;
  assign or_53_out = and_171_out | and_170_out;
  assign xor_108_out = xor_65_out ^ xor_93_out;
  assign and_170_out = or_52_out & xor_108_out;
  assign xor_109_out = xor_108_out ^ or_52_out;
  assign and_54_out = B[6] & A[1];
  assign and_46_out = B[6] & A[2];
  assign and_107_out = and_46_out & and_37_out;
  assign or_21_out = and_107_out | and_106_out;
  assign xor_42_out = and_46_out ^ and_37_out;
  assign and_106_out = or_20_out & xor_42_out;
  assign xor_43_out = xor_42_out ^ or_20_out;
  assign and_38_out = B[6] & A[3];
  assign and_30_out = B[6] & A[4];
  assign and_91_out = and_30_out & and_21_out;
  assign or_13_out = and_91_out | and_90_out;
  assign xor_26_out = and_30_out ^ and_21_out;
  assign and_90_out = or_12_out & xor_26_out;
  assign xor_27_out = xor_26_out ^ or_12_out;
  assign and_137_out = xor_7_out & xor_27_out;
  assign or_36_out = and_137_out | and_136_out;
  assign xor_72_out = xor_7_out ^ xor_27_out;
  assign and_136_out = or_35_out & xor_72_out;
  assign xor_73_out = xor_72_out ^ or_35_out;
  assign and_22_out = B[6] & A[5];
  assign and_14_out = B[6] & A[6];
  assign and_75_out = and_14_out & and_2_out;
  assign or_5_out = and_75_out | and_74_out;
  assign xor_10_out = and_14_out ^ and_2_out;
  assign and_74_out = or_4_out & xor_10_out;
  assign xor_11_out = xor_10_out ^ or_4_out;
  assign and_1_out = B[6] & A[7];
  assign and_61_out = B[5] & A[0];
  assign and_121_out = and_61_out & and_52_out;
  assign or_28_out = and_121_out | and_120_out;
  assign xor_56_out = and_61_out ^ and_52_out;
  assign and_120_out = or_27_out & xor_56_out;
  assign xor_57_out = xor_56_out ^ or_27_out;
  assign and_153_out = xor_37_out & xor_57_out;
  assign or_44_out = and_153_out | and_152_out;
  assign xor_90_out = xor_37_out ^ xor_57_out;
  assign and_152_out = or_43_out & xor_90_out;
  assign xor_91_out = xor_90_out ^ or_43_out;
  assign and_169_out = xor_17_out & xor_91_out;
  assign or_52_out = and_169_out | and_168_out;
  assign xor_106_out = xor_17_out ^ xor_91_out;
  assign and_168_out = or_51_out & xor_106_out;
  assign xor_107_out = xor_106_out ^ or_51_out;
  assign and_53_out = B[5] & A[1];
  assign and_45_out = B[5] & A[2];
  assign and_105_out = and_45_out & and_36_out;
  assign or_20_out = and_105_out | and_104_out;
  assign xor_40_out = and_45_out ^ and_36_out;
  assign and_104_out = or_19_out & xor_40_out;
  assign xor_41_out = xor_40_out ^ or_19_out;
  assign and_37_out = B[5] & A[3];
  assign and_29_out = B[5] & A[4];
  assign and_89_out = and_29_out & and_20_out;
  assign or_12_out = and_89_out | and_88_out;
  assign xor_24_out = and_29_out ^ and_20_out;
  assign and_88_out = or_11_out & xor_24_out;
  assign xor_25_out = xor_24_out ^ or_11_out;
  assign and_135_out = xor_5_out & xor_25_out;
  assign or_35_out = and_135_out | and_134_out;
  assign xor_70_out = xor_5_out ^ xor_25_out;
  assign and_134_out = or_34_out & xor_70_out;
  assign xor_71_out = xor_70_out ^ or_34_out;
  assign and_21_out = B[5] & A[5];
  assign and_13_out = B[5] & A[6];
  assign and_73_out = and_13_out & and_3_out;
  assign or_4_out = and_73_out | and_72_out;
  assign xor_8_out = and_13_out ^ and_3_out;
  assign and_72_out = or_3_out & xor_8_out;
  assign xor_9_out = xor_8_out ^ or_3_out;
  assign and_2_out = B[5] & A[7];
  assign and_60_out = B[4] & A[0];
  assign and_119_out = and_60_out & and_51_out;
  assign or_27_out = and_119_out | and_118_out;
  assign xor_54_out = and_60_out ^ and_51_out;
  assign and_118_out = or_26_out & xor_54_out;
  assign xor_55_out = xor_54_out ^ or_26_out;
  assign and_151_out = xor_35_out & xor_55_out;
  assign or_43_out = and_151_out | and_150_out;
  assign xor_88_out = xor_35_out ^ xor_55_out;
  assign and_150_out = or_42_out & xor_88_out;
  assign xor_89_out = xor_88_out ^ or_42_out;
  assign and_167_out = and_24_out & xor_89_out;
  assign or_51_out = and_167_out | and_166_out;
  assign xor_104_out = and_24_out ^ xor_89_out;
  assign and_166_out = Ground_14_out & xor_104_out;
  assign xor_105_out = xor_104_out ^ Ground_14_out;
  assign and_52_out = B[4] & A[1];
  assign and_44_out = B[4] & A[2];
  assign and_103_out = and_44_out & and_35_out;
  assign or_19_out = and_103_out | and_102_out;
  assign xor_38_out = and_44_out ^ and_35_out;
  assign and_102_out = or_18_out & xor_38_out;
  assign xor_39_out = xor_38_out ^ or_18_out;
  assign and_36_out = B[4] & A[3];
  assign and_28_out = B[4] & A[4];
  assign and_87_out = and_28_out & and_19_out;
  assign or_11_out = and_87_out | and_86_out;
  assign xor_22_out = and_28_out ^ and_19_out;
  assign and_86_out = or_10_out & xor_22_out;
  assign xor_23_out = xor_22_out ^ or_10_out;
  assign and_133_out = xor_3_out & xor_23_out;
  assign or_34_out = and_133_out | and_132_out;
  assign xor_68_out = xor_3_out ^ xor_23_out;
  assign and_132_out = or_33_out & xor_68_out;
  assign xor_69_out = xor_68_out ^ or_33_out;
  assign and_20_out = B[4] & A[5];
  assign and_12_out = B[4] & A[6];
  assign and_71_out = and_12_out & and_4_out;
  assign or_3_out = and_71_out | and_70_out;
  assign xor_6_out = and_12_out ^ and_4_out;
  assign and_70_out = or_2_out & xor_6_out;
  assign xor_7_out = xor_6_out ^ or_2_out;
  assign and_3_out = B[4] & A[7];
  assign and_59_out = B[3] & A[0];
  assign and_117_out = and_59_out & and_50_out;
  assign or_26_out = and_117_out | and_116_out;
  assign xor_52_out = and_59_out ^ and_50_out;
  assign and_116_out = or_25_out & xor_52_out;
  assign xor_53_out = xor_52_out ^ or_25_out;
  assign and_149_out = xor_33_out & xor_53_out;
  assign or_42_out = and_149_out | and_148_out;
  assign xor_86_out = xor_33_out ^ xor_53_out;
  assign and_148_out = or_41_out & xor_86_out;
  assign xor_87_out = xor_86_out ^ or_41_out;
  assign and_51_out = B[3] & A[1];
  assign and_43_out = B[3] & A[2];
  assign and_101_out = and_43_out & and_34_out;
  assign or_18_out = and_101_out | and_100_out;
  assign xor_36_out = and_43_out ^ and_34_out;
  assign and_100_out = or_17_out & xor_36_out;
  assign xor_37_out = xor_36_out ^ or_17_out;
  assign and_35_out = B[3] & A[3];
  assign and_27_out = B[3] & A[4];
  assign and_85_out = and_27_out & and_18_out;
  assign or_10_out = and_85_out | and_84_out;
  assign xor_20_out = and_27_out ^ and_18_out;
  assign and_84_out = or_9_out & xor_20_out;
  assign xor_21_out = xor_20_out ^ or_9_out;
  assign and_131_out = xor_1_out & xor_21_out;
  assign or_33_out = and_131_out | and_130_out;
  assign xor_66_out = xor_1_out ^ xor_21_out;
  assign and_130_out = or_32_out & xor_66_out;
  assign xor_67_out = xor_66_out ^ or_32_out;
  assign and_19_out = B[3] & A[5];
  assign and_11_out = B[3] & A[6];
  assign and_69_out = and_11_out & and_5_out;
  assign or_2_out = and_69_out | and_68_out;
  assign xor_4_out = and_11_out ^ and_5_out;
  assign and_68_out = or_1_out & xor_4_out;
  assign xor_5_out = xor_4_out ^ or_1_out;
  assign and_4_out = B[3] & A[7];
  assign and_58_out = B[2] & A[0];
  assign and_115_out = and_58_out & and_49_out;
  assign or_25_out = and_115_out | and_114_out;
  assign xor_50_out = and_58_out ^ and_49_out;
  assign and_114_out = or_24_out & xor_50_out;
  assign xor_51_out = xor_50_out ^ or_24_out;
  assign and_147_out = and_40_out & xor_51_out;
  assign or_41_out = and_147_out | and_146_out;
  assign xor_84_out = and_40_out ^ xor_51_out;
  assign and_146_out = Ground_11_out & xor_84_out;
  assign xor_85_out = xor_84_out ^ Ground_11_out;
  assign and_50_out = B[2] & A[1];
  assign and_42_out = B[2] & A[2];
  assign and_99_out = and_42_out & and_33_out;
  assign or_17_out = and_99_out | and_98_out;
  assign xor_34_out = and_42_out ^ and_33_out;
  assign and_98_out = or_16_out & xor_34_out;
  assign xor_35_out = xor_34_out ^ or_16_out;
  assign and_34_out = B[2] & A[3];
  assign and_26_out = B[2] & A[4];
  assign and_83_out = and_26_out & and_17_out;
  assign or_9_out = and_83_out | and_82_out;
  assign xor_18_out = and_26_out ^ and_17_out;
  assign and_82_out = or_8_out & xor_18_out;
  assign xor_19_out = xor_18_out ^ or_8_out;
  assign and_129_out = and_8_out & xor_19_out;
  assign or_32_out = and_129_out | and_128_out;
  assign xor_64_out = and_8_out ^ xor_19_out;
  assign and_128_out = Ground_8_out & xor_64_out;
  assign xor_65_out = xor_64_out ^ Ground_8_out;
  assign and_18_out = B[2] & A[5];
  assign and_10_out = B[2] & A[6];
  assign and_67_out = and_10_out & and_6_out;
  assign or_1_out = and_67_out | and_66_out;
  assign xor_2_out = and_10_out ^ and_6_out;
  assign and_66_out = or_0_out & xor_2_out;
  assign xor_3_out = xor_2_out ^ or_0_out;
  assign and_5_out = B[2] & A[7];
  assign and_57_out = B[1] & A[0];
  assign and_113_out = and_57_out & and_48_out;
  assign or_24_out = and_113_out | and_112_out;
  assign xor_48_out = and_57_out ^ and_48_out;
  assign and_112_out = Ground_6_out & xor_48_out;
  assign xor_49_out = xor_48_out ^ Ground_6_out;
  assign and_49_out = B[1] & A[1];
  assign and_41_out = B[1] & A[2];
  assign and_97_out = and_41_out & and_32_out;
  assign or_16_out = and_97_out | and_96_out;
  assign xor_32_out = and_41_out ^ and_32_out;
  assign and_96_out = Ground_4_out & xor_32_out;
  assign xor_33_out = xor_32_out ^ Ground_4_out;
  assign and_33_out = B[1] & A[3];
  assign and_25_out = B[1] & A[4];
  assign and_81_out = and_25_out & and_16_out;
  assign or_8_out = and_81_out | and_80_out;
  assign xor_16_out = and_25_out ^ and_16_out;
  assign and_80_out = Ground_2_out & xor_16_out;
  assign xor_17_out = xor_16_out ^ Ground_2_out;
  assign and_17_out = B[1] & A[5];
  assign and_9_out = B[1] & A[6];
  assign and_65_out = and_9_out & and_7_out;
  assign or_0_out = and_65_out | and_64_out;
  assign xor_0_out = and_9_out ^ and_7_out;
  assign and_64_out = Ground_0_out & xor_0_out;
  assign xor_1_out = xor_0_out ^ Ground_0_out;
  assign and_6_out = B[1] & A[7];
  assign and_56_out = B[0] & A[0];
  assign and_48_out = B[0] & A[1];
  assign and_40_out = B[0] & A[2];
  assign and_32_out = B[0] & A[3];
  assign and_24_out = B[0] & A[4];
  assign and_16_out = B[0] & A[5];
  assign and_8_out = B[0] & A[6];
  assign and_7_out = B[0] & A[7];
  
  assign Ground_17_out = 1'b0;
  assign Ground_16_out = 1'b0;
  assign Ground_15_out = 1'b0;
  assign Ground_14_out = 1'b0;
  assign Ground_13_out = 1'b0;
  assign Ground_12_out = 1'b0;
  assign Ground_11_out = 1'b0;
  assign Ground_10_out = 1'b0;
  assign Ground_9_out = 1'b0;
  assign Ground_8_out = 1'b0;
  assign Ground_7_out = 1'b0;
  assign Ground_6_out = 1'b0;
  assign Ground_5_out = 1'b0;
  assign Ground_4_out = 1'b0;
  assign Ground_3_out = 1'b0;
  assign Ground_2_out = 1'b0;
  assign Ground_1_out = 1'b0;
  assign Ground_0_out = 1'b0;
endmodule

module nand8(C, A, B);
  output [7:0] C;
  input [7:0] A, B;
  wire nand_7_out, nand_6_out, nand_5_out, nand_4_out, nand_3_out, nand_2_out, nand_1_out, nand_0_out;
  wire [7:0] Splitter_2_cmb;
  
  assign nand_7_out = ~(B[7] & A[7]);
  assign Splitter_2_cmb = {nand_7_out,nand_6_out,nand_5_out,nand_4_out,nand_3_out,nand_2_out,nand_1_out,nand_0_out};
  assign C = Splitter_2_cmb;
  assign nand_6_out = ~(B[6] & A[6]);
  assign nand_5_out = ~(B[5] & A[5]);
  assign nand_4_out = ~(B[4] & A[4]);
  assign nand_3_out = ~(B[3] & A[3]);
  assign nand_2_out = ~(B[2] & A[2]);
  assign nand_1_out = ~(B[1] & A[1]);
  assign nand_0_out = ~(B[0] & A[0]);
  
endmodule

module nor8(C, A, B);
  output [7:0] C;
  input [7:0] A, B;
  wire nor_1_out, nor_0_out, nor_2_out, nor_3_out, nor_4_out, nor_5_out, nor_6_out, nor_7_out;
  wire [7:0] Splitter_2_cmb;
  
  assign nor_1_out = ~(B[7] | A[7]);
  assign Splitter_2_cmb = {nor_1_out,nor_0_out,nor_2_out,nor_3_out,nor_4_out,nor_5_out,nor_6_out,nor_7_out};
  assign C = Splitter_2_cmb;
  assign nor_0_out = ~(B[6] | A[6]);
  assign nor_2_out = ~(B[5] | A[5]);
  assign nor_3_out = ~(B[4] | A[4]);
  assign nor_4_out = ~(B[3] | A[3]);
  assign nor_5_out = ~(B[2] | A[2]);
  assign nor_6_out = ~(B[1] | A[1]);
  assign nor_7_out = ~(B[0] | A[0]);
  
endmodule

module nxor8(C, A, B);
  output [7:0] C;
  input [7:0] A, B;
  wire xnor_7_out, xnor_6_out, xnor_5_out, xnor_4_out, xnor_3_out, xnor_2_out, xnor_1_out, xnor_0_out;
  wire [7:0] Splitter_2_cmb;
  
  assign xnor_7_out = ~(B[7] ^ A[7]);
  assign Splitter_2_cmb = {xnor_7_out,xnor_6_out,xnor_5_out,xnor_4_out,xnor_3_out,xnor_2_out,xnor_1_out,xnor_0_out};
  assign C = Splitter_2_cmb;
  assign xnor_6_out = ~(B[6] ^ A[6]);
  assign xnor_5_out = ~(B[5] ^ A[5]);
  assign xnor_4_out = ~(B[4] ^ A[4]);
  assign xnor_3_out = ~(B[3] ^ A[3]);
  assign xnor_2_out = ~(B[2] ^ A[2]);
  assign xnor_1_out = ~(B[1] ^ A[1]);
  assign xnor_0_out = ~(B[0] ^ A[0]);
  
endmodule

module not8(C, A);
  output [7:0] C;
  input [7:0] A;
  wire not_7_out, not_6_out, not_5_out, not_4_out, not_3_out, not_2_out, not_1_out, not_0_out;
  wire [7:0] Splitter_1_cmb;
  
  assign not_7_out = ~A[7];
  assign Splitter_1_cmb = {not_7_out,not_6_out,not_5_out,not_4_out,not_3_out,not_2_out,not_1_out,not_0_out};
  assign C = Splitter_1_cmb;
  assign not_6_out = ~A[6];
  assign not_5_out = ~A[5];
  assign not_4_out = ~A[4];
  assign not_3_out = ~A[3];
  assign not_2_out = ~A[2];
  assign not_1_out = ~A[1];
  assign not_0_out = ~A[0];
endmodule

module regdec(S, A, \R/L );
  output [7:0] S;
  input \R/L ;
  input [7:0] A;
  wire and_10_out, or_5_out, and_12_out, and_8_out, or_4_out, and_6_out, or_3_out, and_4_out, or_1_out, and_2_out, or_2_out, and_0_out, or_0_out, not_0_out, and_11_out, and_13_out, and_9_out, and_7_out, and_5_out, and_3_out, and_1_out;
  wire [7:0] Splitter_1_cmb;
  assign and_10_out = A[5] & \R/L ;
  assign or_5_out = and_10_out | and_13_out;
  assign Splitter_1_cmb = {and_12_out,or_5_out,or_4_out,or_3_out,or_1_out,or_2_out,or_0_out,and_1_out};
  assign S = Splitter_1_cmb;
  assign and_12_out = A[6] & \R/L ;
  assign and_8_out = A[4] & \R/L ;
  assign or_4_out = and_8_out | and_11_out;
  assign and_6_out = A[3] & \R/L ;
  assign or_3_out = and_6_out | and_9_out;
  assign and_4_out = A[2] & \R/L ;
  assign or_1_out = and_4_out | and_7_out;
  assign and_2_out = A[1] & \R/L ;
  assign or_2_out = and_2_out | and_5_out;
  assign and_0_out = A[0] & \R/L ;
  assign or_0_out = and_0_out | and_3_out;
  assign not_0_out = ~\R/L ;
  assign and_11_out = not_0_out & A[6];
  assign and_13_out = not_0_out & A[7];
  assign and_9_out = not_0_out & A[5];
  assign and_7_out = not_0_out & A[4];
  assign and_5_out = not_0_out & A[3];
  assign and_3_out = not_0_out & A[2];
  assign and_1_out = not_0_out & A[1];
  
endmodule






















module alu(out1, A, B, OP, clk);
  output [7:0] out1;
  input clk;
  input [3:0] OP;
  input [7:0] A, B;
  wire divmod2_1_out_2, divmod2_1_out_3, cmp8_6_out_0, cmp8_6_out_1, cmp8_6_out_2, add8_0_out_1, Demultiplexer_2_out_0, Demultiplexer_2_out_1, Demultiplexer_2_out_2, Demultiplexer_2_out_3, Demultiplexer_2_out_4, or_3_out, const_3, const_2, Ground_0_out;
  wire [2:0] divmod2_1_out_1;
  wire [4:0] const_1;
  wire [6:0] const_0;
  wire [7:0] mult8_2_out_0, mult8_2_out_1, mult8_2_out_2, mult8_2_out_3, mult8_2_out_4, mult8_2_out_5, mult8_2_out_6, mult8_2_out_7, mult8_2_out_8, Multiplexer_1_out, divmod2_1_out_0, Splitter_0_cmb, Demultiplexer_0_out_0, Demultiplexer_0_out_1, Demultiplexer_0_out_2, Demultiplexer_0_out_3, Demultiplexer_0_out_4, Demultiplexer_0_out_5, Demultiplexer_0_out_6, Demultiplexer_0_out_7, Demultiplexer_0_out_8, Demultiplexer_0_out_9, nxor8_10_out, nor8_9_out, nand8_8_out, Splitter_1_cmb, xor8_5_out, or8_4_out, mult8combi_7_out_0, mult8combi_7_out_1, Multiplexer_0_out, or_1_out, add8_0_out_0, Demultiplexer_1_out_0, Demultiplexer_1_out_1, Demultiplexer_1_out_2, Demultiplexer_1_out_3, Demultiplexer_1_out_4, Demultiplexer_1_out_5, Demultiplexer_1_out_6, Demultiplexer_1_out_7, Demultiplexer_1_out_8, Demultiplexer_1_out_9, Demultiplexer_1_out_10, Demultiplexer_1_out_11, Demultiplexer_1_out_12, Demultiplexer_1_out_13, Demultiplexer_1_out_14, or_4_out, regdec_12_out, not8_11_out, or_2_out, or_0_out;
  wire [15:0] mult8combi_7_out_2;
  mult8 mult8_2(mult8_2_out_0, mult8_2_out_1, mult8_2_out_2, mult8_2_out_3, mult8_2_out_4, mult8_2_out_5, mult8_2_out_6, mult8_2_out_7, mult8_2_out_8, Demultiplexer_0_out_2, Demultiplexer_1_out_4, Demultiplexer_2_out_3, clk, );
  Multiplexer16 #(8) Multiplexer_1(Multiplexer_1_out, add8_0_out_0, add8_0_out_0, divmod2_1_out_0, Splitter_0_cmb, Multiplexer_0_out, , mult8_2_out_5, or8_4_out, xor8_5_out, Splitter_1_cmb, nand8_8_out, nor8_9_out, nxor8_10_out, not8_11_out, regdec_12_out, regdec_12_out, OP);
  assign out1 = Multiplexer_1_out;
  divmod2 divmod2_1(divmod2_1_out_0, divmod2_1_out_1, divmod2_1_out_2, divmod2_1_out_3, or_2_out, or_3_out, clk, );
  assign Splitter_0_cmb = {const_0,divmod2_1_out_2};
  Demultiplexer16 #(8) Demultiplexer_0(Demultiplexer_0_out_0, Demultiplexer_0_out_1, , , Demultiplexer_0_out_2, , Demultiplexer_0_out_3, Demultiplexer_0_out_4, Demultiplexer_0_out_5, Demultiplexer_0_out_6, Demultiplexer_0_out_7, Demultiplexer_0_out_8, Demultiplexer_0_out_9, , , , B, OP);
  nxor8 nxor8_10(nxor8_10_out, Demultiplexer_1_out_11, Demultiplexer_0_out_9);
  nor8 nor8_9(nor8_9_out, Demultiplexer_1_out_10, Demultiplexer_0_out_8);
  nand8 nand8_8(nand8_8_out, Demultiplexer_1_out_9, Demultiplexer_0_out_7);
  cmp8 cmp8_6(cmp8_6_out_0, cmp8_6_out_1, cmp8_6_out_2, Demultiplexer_1_out_8, Demultiplexer_0_out_6);
  assign Splitter_1_cmb = {const_1,cmp8_6_out_2,cmp8_6_out_0,cmp8_6_out_1};
  xor8 xor8_5(xor8_5_out, Demultiplexer_1_out_7, Demultiplexer_0_out_5);
  or8 or8_4(or8_4_out, Demultiplexer_1_out_6, Demultiplexer_0_out_4);
  and8 and8_3(mult8_2_out_5, Demultiplexer_1_out_5, Demultiplexer_0_out_3);
  mult8combi mult8combi_7(mult8combi_7_out_0, mult8combi_7_out_1, mult8combi_7_out_2, Demultiplexer_1_out_4, Demultiplexer_0_out_2);
  Multiplexer2 #(8) Multiplexer_0(Multiplexer_0_out, , mult8combi_7_out_0, const_3);
  assign or_1_out = Demultiplexer_0_out_0 | Demultiplexer_0_out_1;
  add8 add8_0(add8_0_out_0, add8_0_out_1, Demultiplexer_2_out_0, or_1_out, or_0_out, Ground_0_out);
  Demultiplexer16 #(8) Demultiplexer_1(Demultiplexer_1_out_0, Demultiplexer_1_out_1, Demultiplexer_1_out_2, Demultiplexer_1_out_3, Demultiplexer_1_out_4, , Demultiplexer_1_out_5, Demultiplexer_1_out_6, Demultiplexer_1_out_7, Demultiplexer_1_out_8, Demultiplexer_1_out_9, Demultiplexer_1_out_10, Demultiplexer_1_out_11, Demultiplexer_1_out_12, Demultiplexer_1_out_13, Demultiplexer_1_out_14, A, OP);
  assign or_4_out = Demultiplexer_1_out_14 | Demultiplexer_1_out_13;
  regdec regdec_12(regdec_12_out, or_4_out, Demultiplexer_2_out_4);
  not8 not8_11(not8_11_out, Demultiplexer_1_out_12);
  assign or_2_out = Demultiplexer_1_out_3 | Demultiplexer_1_out_2;
  assign or_0_out = Demultiplexer_1_out_0 | Demultiplexer_1_out_1;
  Demultiplexer16 Demultiplexer_2(, Demultiplexer_2_out_0, Demultiplexer_2_out_1, Demultiplexer_2_out_2, Demultiplexer_2_out_3, , , , , , , , , , , Demultiplexer_2_out_4, const_2, OP);
  assign or_3_out = Demultiplexer_2_out_2 | Demultiplexer_2_out_1;
  assign const_3 = 1'b1;
  assign const_2 = 1'b1;
  assign const_1 = 5'b00000;
  assign const_0 = 7'b0000000;
  assign Ground_0_out = 1'b0;
endmodule

module blockreg(A, B, charge, clk, data, reg, outA, outB);
  output [7:0] A, B;
  input charge, clk;
  input [4:0] reg, outA, outB;
  input [7:0] data;
  wire Demultiplexer_0_out_0, Demultiplexer_0_out_1, Demultiplexer_0_out_2, Demultiplexer_0_out_3, Demultiplexer_0_out_4, Demultiplexer_0_out_5, Demultiplexer_0_out_6, Demultiplexer_0_out_7, Demultiplexer_0_out_8, Demultiplexer_0_out_9, Demultiplexer_0_out_10, Demultiplexer_0_out_11, Demultiplexer_0_out_12, Demultiplexer_0_out_13, Demultiplexer_0_out_14, Demultiplexer_0_out_15, Demultiplexer_0_out_16, Demultiplexer_0_out_17, Demultiplexer_0_out_18, Demultiplexer_0_out_19, Demultiplexer_0_out_20, Demultiplexer_0_out_21, Demultiplexer_0_out_22, Demultiplexer_0_out_23, Demultiplexer_0_out_24, Demultiplexer_0_out_25, Demultiplexer_0_out_26, Demultiplexer_0_out_27, Demultiplexer_0_out_28, Demultiplexer_0_out_29, Demultiplexer_0_out_30, Demultiplexer_0_out_31, and_0_out;
  wire [7:0] Multiplexer_2_out, Multiplexer_1_out, Dlatch_5_Q, Multiplexer_3_out, Multiplexer_0_out, Dlatch_4_Q, Dlatch_33_Q, Dlatch_32_Q, Dlatch_31_Q, Dlatch_30_Q, Dlatch_29_Q, Dlatch_28_Q, Dlatch_27_Q, Dlatch_26_Q, Dlatch_25_Q, Dlatch_24_Q, Dlatch_23_Q, Dlatch_22_Q, Dlatch_21_Q, Dlatch_20_Q, Dlatch_19_Q, Dlatch_18_Q, Dlatch_17_Q, Dlatch_16_Q, Dlatch_15_Q, Dlatch_14_Q, Dlatch_13_Q, Dlatch_12_Q, Dlatch_11_Q, Dlatch_10_Q, Dlatch_9_Q, Dlatch_8_Q, Dlatch_7_Q, Dlatch_6_Q, Dlatch_3_Q, Dlatch_2_Q, Dlatch_1_Q, Dlatch_0_Q, const_0;
  Multiplexer32 #(8) Multiplexer_2(Multiplexer_2_out, Dlatch_0_Q, Dlatch_1_Q, Dlatch_2_Q, Dlatch_3_Q, Dlatch_6_Q, Dlatch_7_Q, Dlatch_8_Q, Dlatch_9_Q, Dlatch_10_Q, Dlatch_11_Q, Dlatch_12_Q, Dlatch_13_Q, Dlatch_14_Q, Dlatch_15_Q, Dlatch_16_Q, Dlatch_17_Q, Dlatch_18_Q, Dlatch_19_Q, Dlatch_20_Q, Dlatch_21_Q, Dlatch_22_Q, Dlatch_23_Q, Dlatch_24_Q, Dlatch_25_Q, Dlatch_26_Q, Dlatch_27_Q, Dlatch_28_Q, Dlatch_29_Q, Dlatch_30_Q, Dlatch_31_Q, Dlatch_32_Q, Dlatch_33_Q, outB);
  Multiplexer2 #(8) Multiplexer_1(Multiplexer_1_out, const_0, Multiplexer_2_out, clk);
  Dlatch #(8) Dlatch_5(Dlatch_5_Q, , clk, Multiplexer_1_out);
  assign B = Dlatch_5_Q;
  Multiplexer32 #(8) Multiplexer_3(Multiplexer_3_out, Dlatch_0_Q, Dlatch_1_Q, Dlatch_2_Q, Dlatch_3_Q, Dlatch_6_Q, Dlatch_7_Q, Dlatch_8_Q, Dlatch_9_Q, Dlatch_10_Q, Dlatch_11_Q, Dlatch_12_Q, Dlatch_13_Q, Dlatch_14_Q, Dlatch_15_Q, Dlatch_16_Q, Dlatch_17_Q, Dlatch_18_Q, Dlatch_19_Q, Dlatch_20_Q, Dlatch_21_Q, Dlatch_22_Q, Dlatch_23_Q, Dlatch_24_Q, Dlatch_25_Q, Dlatch_26_Q, Dlatch_27_Q, Dlatch_28_Q, Dlatch_29_Q, Dlatch_30_Q, Dlatch_31_Q, Dlatch_32_Q, Dlatch_33_Q, outA);
  Multiplexer2 #(8) Multiplexer_0(Multiplexer_0_out, const_0, Multiplexer_3_out, clk);
  Dlatch #(8) Dlatch_4(Dlatch_4_Q, , clk, Multiplexer_0_out);
  assign A = Dlatch_4_Q;
  Demultiplexer32 Demultiplexer_0(Demultiplexer_0_out_0, Demultiplexer_0_out_1, Demultiplexer_0_out_2, Demultiplexer_0_out_3, Demultiplexer_0_out_4, Demultiplexer_0_out_5, Demultiplexer_0_out_6, Demultiplexer_0_out_7, Demultiplexer_0_out_8, Demultiplexer_0_out_9, Demultiplexer_0_out_10, Demultiplexer_0_out_11, Demultiplexer_0_out_12, Demultiplexer_0_out_13, Demultiplexer_0_out_14, Demultiplexer_0_out_15, Demultiplexer_0_out_16, Demultiplexer_0_out_17, Demultiplexer_0_out_18, Demultiplexer_0_out_19, Demultiplexer_0_out_20, Demultiplexer_0_out_21, Demultiplexer_0_out_22, Demultiplexer_0_out_23, Demultiplexer_0_out_24, Demultiplexer_0_out_25, Demultiplexer_0_out_26, Demultiplexer_0_out_27, Demultiplexer_0_out_28, Demultiplexer_0_out_29, Demultiplexer_0_out_30, Demultiplexer_0_out_31, and_0_out, reg);
  Dlatch #(8) Dlatch_33(Dlatch_33_Q, , Demultiplexer_0_out_31, data);
  Dlatch #(8) Dlatch_32(Dlatch_32_Q, , Demultiplexer_0_out_30, data);
  Dlatch #(8) Dlatch_31(Dlatch_31_Q, , Demultiplexer_0_out_29, data);
  Dlatch #(8) Dlatch_30(Dlatch_30_Q, , Demultiplexer_0_out_28, data);
  Dlatch #(8) Dlatch_29(Dlatch_29_Q, , Demultiplexer_0_out_27, data);
  Dlatch #(8) Dlatch_28(Dlatch_28_Q, , Demultiplexer_0_out_26, data);
  Dlatch #(8) Dlatch_27(Dlatch_27_Q, , Demultiplexer_0_out_25, data);
  Dlatch #(8) Dlatch_26(Dlatch_26_Q, , Demultiplexer_0_out_24, data);
  Dlatch #(8) Dlatch_25(Dlatch_25_Q, , Demultiplexer_0_out_23, data);
  Dlatch #(8) Dlatch_24(Dlatch_24_Q, , Demultiplexer_0_out_22, data);
  Dlatch #(8) Dlatch_23(Dlatch_23_Q, , Demultiplexer_0_out_21, data);
  Dlatch #(8) Dlatch_22(Dlatch_22_Q, , Demultiplexer_0_out_20, data);
  Dlatch #(8) Dlatch_21(Dlatch_21_Q, , Demultiplexer_0_out_19, data);
  Dlatch #(8) Dlatch_20(Dlatch_20_Q, , Demultiplexer_0_out_18, data);
  Dlatch #(8) Dlatch_19(Dlatch_19_Q, , Demultiplexer_0_out_17, data);
  Dlatch #(8) Dlatch_18(Dlatch_18_Q, , Demultiplexer_0_out_16, data);
  Dlatch #(8) Dlatch_17(Dlatch_17_Q, , Demultiplexer_0_out_15, data);
  Dlatch #(8) Dlatch_16(Dlatch_16_Q, , Demultiplexer_0_out_14, data);
  Dlatch #(8) Dlatch_15(Dlatch_15_Q, , Demultiplexer_0_out_13, data);
  Dlatch #(8) Dlatch_14(Dlatch_14_Q, , Demultiplexer_0_out_12, data);
  Dlatch #(8) Dlatch_13(Dlatch_13_Q, , Demultiplexer_0_out_11, data);
  Dlatch #(8) Dlatch_12(Dlatch_12_Q, , Demultiplexer_0_out_10, data);
  Dlatch #(8) Dlatch_11(Dlatch_11_Q, , Demultiplexer_0_out_9, data);
  Dlatch #(8) Dlatch_10(Dlatch_10_Q, , Demultiplexer_0_out_8, data);
  Dlatch #(8) Dlatch_9(Dlatch_9_Q, , Demultiplexer_0_out_7, data);
  Dlatch #(8) Dlatch_8(Dlatch_8_Q, , Demultiplexer_0_out_6, data);
  Dlatch #(8) Dlatch_7(Dlatch_7_Q, , Demultiplexer_0_out_5, data);
  Dlatch #(8) Dlatch_6(Dlatch_6_Q, , Demultiplexer_0_out_4, data);
  Dlatch #(8) Dlatch_3(Dlatch_3_Q, , Demultiplexer_0_out_3, data);
  Dlatch #(8) Dlatch_2(Dlatch_2_Q, , Demultiplexer_0_out_2, data);
  Dlatch #(8) Dlatch_1(Dlatch_1_Q, , Demultiplexer_0_out_1, data);
  Dlatch #(8) Dlatch_0(Dlatch_0_Q, , Demultiplexer_0_out_0, data);
  assign and_0_out = clk & charge;
  assign const_0 = 8'b00000000;
endmodule






























module datapath(clk_0, clk, activate_mem, Write, Bctrl, outA, charge, reg, outB, datain, OP, Read, datainctrl, addrin, addrinctrl, addrout, addroutctrl, regdatactrl, regdatain);
  input clk, activate_mem, Write, Bctrl, charge, Read, clk_0;
  input [1:0] datainctrl, addrinctrl, addroutctrl, regdatactrl;
  input [3:0] OP;
  input [4:0] outA, reg, outB;
  input [7:0] datain, addrin, addrout, regdatain;
  wire mem8_1_out_1;
  wire [7:0] DflipFlop_3_Q, Multiplexer_3_out, mem8_1_out_0, Multiplexer_2_out, Multiplexer_1_out, Multiplexer_4_out, blockreg_2_out_0, blockreg_2_out_1, DflipFlop_0_Q, Multiplexer_0_out, alu_0_out, DflipFlop_2_Q, DflipFlop_1_Q;
  DflipFlop #(8) DflipFlop_3(DflipFlop_3_Q, , clk_0, mem8_1_out_0, , , );
  Multiplexer4 #(8) Multiplexer_3(Multiplexer_3_out, DflipFlop_0_Q, DflipFlop_2_Q, addrout, DflipFlop_3_Q, addroutctrl);
  mem8 mem8_1(mem8_1_out_0, mem8_1_out_1, Multiplexer_3_out, clk, Write, Multiplexer_1_out, activate_mem, Multiplexer_2_out, Read);
  Multiplexer4 #(8) Multiplexer_2(Multiplexer_2_out, DflipFlop_0_Q, DflipFlop_2_Q, addrin, DflipFlop_3_Q, addrinctrl);
  Multiplexer4 #(8) Multiplexer_1(Multiplexer_1_out, DflipFlop_0_Q, DflipFlop_2_Q, datain, DflipFlop_3_Q, datainctrl);
  Multiplexer4 #(8) Multiplexer_4(Multiplexer_4_out, DflipFlop_0_Q, DflipFlop_2_Q, regdatain, DflipFlop_3_Q, regdatactrl);
  blockreg blockreg_2(blockreg_2_out_0, blockreg_2_out_1, charge, clk, Multiplexer_4_out, reg, outA, outB);
  DflipFlop #(8) DflipFlop_0(DflipFlop_0_Q, , clk_0, blockreg_2_out_1, , , );
  Multiplexer2 #(8) Multiplexer_0(Multiplexer_0_out, DflipFlop_0_Q, datain, Bctrl);
  alu alu_0(alu_0_out, DflipFlop_1_Q, Multiplexer_0_out, OP, clk);
  DflipFlop #(8) DflipFlop_2(DflipFlop_2_Q, , clk_0, alu_0_out, , , );
  DflipFlop #(8) DflipFlop_1(DflipFlop_1_Q, , clk_0, blockreg_2_out_0, , , );
endmodule































module load_reg(charge, reg, regdatain, regdatactrl, writing_reg, writing_reg_data);
  output charge;
  output [1:0] regdatactrl;
  output [4:0] reg;
  output [7:0] regdatain;
  input [4:0] writing_reg;
  input [7:0] writing_reg_data;
  wire Power_0_out;
  wire [1:0] const_0;
  assign regdatain = writing_reg_data;
  assign reg = writing_reg;
  assign const_0 = 2'b10;
  assign regdatactrl = const_0;
  assign Power_0_out = ~1'b0;
  assign charge = Power_0_out;
endmodule


module store_reg(outA, outB, regA, regB);
  output [4:0] outA, outB;
  input [4:0] regA, regB;
  assign outB = regB;
  assign outA = regA;
endmodule


module alu_ctrl(Bctrl, OP, is_imm, funct3, funct7);
  output Bctrl;
  output [3:0] OP;
  input is_imm, funct7;
  input [2:0] funct3;
  wire [3:0] Splitter_0_cmb;
  assign Splitter_0_cmb = {funct7,funct3};
  assign OP = Splitter_0_cmb;
  assign Bctrl = is_imm;
endmodule


module load_mem(write, activate_mem, datain, addrin, datainctrl, addrinctrl, datain, addrin, active, datainctrl, datainctrl);
  output write,  activate_mem;
  output [1:0] datainctrl, addrinctrl;
  output [7:0] datain, addrin;
  input active;
  input [1:0] datainctrl, datainctrl;
  input [7:0] datain, addrin;
  assign addrinctrl = datainctrl;
  assign datainctrl = datainctrl;
  assign activate_mem = active;
  assign write = active;
  assign addrin = addrin;
  assign datain = datain;
endmodule


module store_mem(Read, activate_mem, addrout, addroutctrl, addrout, addroutctrl);
  output Read,  activate_mem;
  output [1:0] addroutctrl;
  output [7:0] addrout;
  input [1:0] addroutctrl;
  input [7:0] addrout;
  wire Power_0_out;
  assign addroutctrl = addroutctrl;
  assign addrout = addrout;
  assign Power_0_out = ~1'b0;
  assign activate_mem = Power_0_out;
  assign Read = Power_0_out;
endmodule


module Main(clk_0, inp_0, inp_1, inp_2, inp_3, inp_4, inp_5, inp_6, inp_7, inp_8, inp_9, inp_10, inp_11, inp_12, inp_13);
  input inp_4, inp_6, inp_10, clk_0;
  input [1:0] inp_11, inp_12, inp_13;
  input [2:0] inp_5;
  input [4:0] inp_0, inp_2, inp_3;
  input [7:0] inp_1, inp_7, inp_8, inp_9;
  wire store_mem_5_out_0, store_mem_5_out_1, or_0_out, load_mem_4_out_0, load_mem_4_out_1, alu_ctrl_3_out_0, load_reg_1_out_0;
  wire [1:0] store_mem_5_out_3, load_mem_4_out_4, load_mem_4_out_5, load_reg_1_out_3;
  wire [3:0] alu_ctrl_3_out_1;
  wire [4:0] store_reg_2_out_0, store_reg_2_out_1, load_reg_1_out_1;
  wire [7:0] store_mem_5_out_2, load_mem_4_out_2, load_mem_4_out_3, load_reg_1_out_2;
  datapath datapath_0(clk_0, or_0_out, load_mem_4_out_0, alu_ctrl_3_out_0, store_reg_2_out_0, load_reg_1_out_0, load_reg_1_out_1, store_reg_2_out_1, load_mem_4_out_2, alu_ctrl_3_out_1, store_mem_5_out_0, load_mem_4_out_4, load_mem_4_out_3, load_mem_4_out_5, store_mem_5_out_2, store_mem_5_out_3, load_reg_1_out_3, load_reg_1_out_2);
  store_mem store_mem_5(store_mem_5_out_0, store_mem_5_out_1, store_mem_5_out_2, store_mem_5_out_3, inp_9, inp_13);
  assign or_0_out = load_mem_4_out_1 | store_mem_5_out_1;
  load_mem load_mem_4(load_mem_4_out_0, load_mem_4_out_1, load_mem_4_out_2, load_mem_4_out_3, load_mem_4_out_4, load_mem_4_out_5, inp_7, inp_8, inp_10, inp_11, inp_12);
  alu_ctrl alu_ctrl_3(alu_ctrl_3_out_0, alu_ctrl_3_out_1, inp_4, inp_5, inp_6);
  store_reg store_reg_2(store_reg_2_out_0, store_reg_2_out_1, inp_2, inp_3);
  load_reg load_reg_1(load_reg_1_out_0, load_reg_1_out_1, load_reg_1_out_2, load_reg_1_out_3, inp_0, inp_1);
endmodule

module b1(\0 , \1 , data, activate);
  output \0 ,  \1 ;
  input data, activate;
  wire and_0_out, and_1_out, not_0_out;
  assign and_0_out = activate & data;
  assign \1  = and_0_out;
  assign and_1_out = not_0_out & activate;
  assign \0  = and_1_out;
  assign not_0_out = ~data;
endmodule


module mux4(\0 , \1 , \2 , \3 , B, A, activate);
  output \0 ,  \1 ,  \2 ,  \3 ;
  input B, A, activate;
  wire b1_0_out_0, b1_0_out_1, b1_2_out_0, b1_2_out_1, b1_1_out_0, b1_1_out_1;
  b1 b1_0(b1_0_out_0, b1_0_out_1, A, activate);
  b1 b1_2(b1_2_out_0, b1_2_out_1, B, b1_0_out_1);
  assign \3  = b1_2_out_1;
  assign \2  = b1_2_out_0;
  b1 b1_1(b1_1_out_0, b1_1_out_1, B, b1_0_out_0);
  assign \1  = b1_1_out_1;
  assign \0  = b1_1_out_0;
endmodule



module multimux(\0 , \1 , \2 , \3 , \4 , \5 , \6 , \7 , \8 , \9 , \10 , \11 , \12 , \13 , \14 , \15 , A, B, C, D, activate);
  output \0 ,  \1 ,  \2 ,  \3 ,  \4 ,  \5 ,  \6 ,  \7 ,  \8 ,  \9 ,  \10 ,  \11 ,  \12 ,  \13 ,  \14 ,  \15 ;
  input A, B, C, D, activate;
  wire mux4_0_out_0, mux4_0_out_1, mux4_0_out_2, mux4_0_out_3, mux4_3_out_0, mux4_3_out_1, mux4_3_out_2, mux4_3_out_3, mux4_2_out_0, mux4_2_out_1, mux4_2_out_2, mux4_2_out_3, mux4_1_out_0, mux4_1_out_1, mux4_1_out_2, mux4_1_out_3, mux4_4_out_0, mux4_4_out_1, mux4_4_out_2, mux4_4_out_3;
  mux4 mux4_0(mux4_0_out_0, mux4_0_out_1, mux4_0_out_2, mux4_0_out_3, C, D, activate);
  mux4 mux4_3(mux4_3_out_0, mux4_3_out_1, mux4_3_out_2, mux4_3_out_3, A, B, mux4_0_out_3);
  assign \15  = mux4_3_out_3;
  assign \14  = mux4_3_out_2;
  assign \13  = mux4_3_out_1;
  assign \12  = mux4_3_out_0;
  mux4 mux4_2(mux4_2_out_0, mux4_2_out_1, mux4_2_out_2, mux4_2_out_3, A, B, mux4_0_out_2);
  assign \11  = mux4_2_out_3;
  assign \10  = mux4_2_out_2;
  assign \9  = mux4_2_out_1;
  assign \8  = mux4_2_out_0;
  mux4 mux4_1(mux4_1_out_0, mux4_1_out_1, mux4_1_out_2, mux4_1_out_3, A, B, mux4_0_out_1);
  assign \7  = mux4_1_out_3;
  assign \6  = mux4_1_out_2;
  assign \5  = mux4_1_out_1;
  assign \4  = mux4_1_out_0;
  mux4 mux4_4(mux4_4_out_0, mux4_4_out_1, mux4_4_out_2, mux4_4_out_3, A, B, mux4_0_out_0);
  assign \3  = mux4_4_out_3;
  assign \2  = mux4_4_out_2;
  assign \1  = mux4_4_out_1;
  assign \0  = mux4_4_out_0;
endmodule




module mux(\0 , \1 , \2 , \3 , \4 , \5 , \6 , \7 , \8 , \9 , \10 , \11 , \12 , \13 , \14 , \15 , out_16, out_17, out_18, out_19, out_20, out_21, out_22, out_23, out_24, out_25, out_26, out_27, out_28, out_29, out_30, out_31, out_32, out_33, out_34, out_35, out_36, out_37, out_38, out_39, out_40, out_41, out_42, out_43, out_44, out_45, out_46, out_47, out_48, out_49, out_50, out_51, out_52, out_53, out_54, out_55, out_56, out_57, out_58, out_59, out_60, out_61, out_62, out_63, out_64, out_65, out_66, out_67, out_68, out_69, out_70, out_71, out_72, out_73, out_74, out_75, out_76, out_77, out_78, out_79, out_80, out_81, out_82, out_83, out_84, out_85, out_86, out_87, out_88, out_89, out_90, out_91, out_92, out_93, out_94, out_95, out_96, out_97, out_98, out_99, out_100, out_101, out_102, out_103, out_104, out_105, out_106, out_107, out_108, out_109, out_110, out_111, out_112, out_113, out_114, out_115, out_116, out_117, out_118, out_119, out_120, out_121, out_122, out_123, out_124, out_125, out_126, out_127, out_128, out_129, out_130, out_131, out_132, out_133, out_134, out_135, out_136, out_137, out_138, out_139, out_140, out_141, out_142, out_143, out_144, out_145, out_146, out_147, out_148, out_149, out_150, out_151, out_152, out_153, out_154, out_155, out_156, out_157, out_158, out_159, out_160, out_161, out_162, out_163, out_164, out_165, out_166, out_167, out_168, out_169, out_170, out_171, out_172, out_173, out_174, out_175, out_176, out_177, out_178, out_179, out_180, out_181, out_182, out_183, out_184, out_185, out_186, out_187, out_188, out_189, out_190, out_191, out_192, out_193, out_194, out_195, out_196, out_197, out_198, out_199, out_200, out_201, out_202, out_203, out_204, out_205, out_206, out_207, out_208, out_209, out_210, out_211, out_212, out_213, out_214, out_215, out_216, out_217, out_218, out_219, out_220, out_221, out_222, out_223, out_224, out_225, out_226, out_227, out_228, out_229, out_230, out_231, out_232, out_233, out_234, out_235, out_236, out_237, out_238, out_239, out_240, out_241, out_242, out_243, out_244, out_245, out_246, out_247, out_248, out_249, out_250, out_251, out_252, out_253, out_254, out_255, activate, D, C, B, A, H, G, F, E);
  output \0 ,  \1 ,  \2 ,  \3 ,  \4 ,  \5 ,  \6 ,  \7 ,  \8 ,  \9 ,  \10 ,  \11 ,  \12 ,  \13 ,  \14 ,  \15 ,  out_16,  out_17,  out_18,  out_19,  out_20,  out_21,  out_22,  out_23,  out_24,  out_25,  out_26,  out_27,  out_28,  out_29,  out_30,  out_31,  out_32,  out_33,  out_34,  out_35,  out_36,  out_37,  out_38,  out_39,  out_40,  out_41,  out_42,  out_43,  out_44,  out_45,  out_46,  out_47,  out_48,  out_49,  out_50,  out_51,  out_52,  out_53,  out_54,  out_55,  out_56,  out_57,  out_58,  out_59,  out_60,  out_61,  out_62,  out_63,  out_64,  out_65,  out_66,  out_67,  out_68,  out_69,  out_70,  out_71,  out_72,  out_73,  out_74,  out_75,  out_76,  out_77,  out_78,  out_79,  out_80,  out_81,  out_82,  out_83,  out_84,  out_85,  out_86,  out_87,  out_88,  out_89,  out_90,  out_91,  out_92,  out_93,  out_94,  out_95,  out_96,  out_97,  out_98,  out_99,  out_100,  out_101,  out_102,  out_103,  out_104,  out_105,  out_106,  out_107,  out_108,  out_109,  out_110,  out_111,  out_112,  out_113,  out_114,  out_115,  out_116,  out_117,  out_118,  out_119,  out_120,  out_121,  out_122,  out_123,  out_124,  out_125,  out_126,  out_127,  out_128,  out_129,  out_130,  out_131,  out_132,  out_133,  out_134,  out_135,  out_136,  out_137,  out_138,  out_139,  out_140,  out_141,  out_142,  out_143,  out_144,  out_145,  out_146,  out_147,  out_148,  out_149,  out_150,  out_151,  out_152,  out_153,  out_154,  out_155,  out_156,  out_157,  out_158,  out_159,  out_160,  out_161,  out_162,  out_163,  out_164,  out_165,  out_166,  out_167,  out_168,  out_169,  out_170,  out_171,  out_172,  out_173,  out_174,  out_175,  out_176,  out_177,  out_178,  out_179,  out_180,  out_181,  out_182,  out_183,  out_184,  out_185,  out_186,  out_187,  out_188,  out_189,  out_190,  out_191,  out_192,  out_193,  out_194,  out_195,  out_196,  out_197,  out_198,  out_199,  out_200,  out_201,  out_202,  out_203,  out_204,  out_205,  out_206,  out_207,  out_208,  out_209,  out_210,  out_211,  out_212,  out_213,  out_214,  out_215,  out_216,  out_217,  out_218,  out_219,  out_220,  out_221,  out_222,  out_223,  out_224,  out_225,  out_226,  out_227,  out_228,  out_229,  out_230,  out_231,  out_232,  out_233,  out_234,  out_235,  out_236,  out_237,  out_238,  out_239,  out_240,  out_241,  out_242,  out_243,  out_244,  out_245,  out_246,  out_247,  out_248,  out_249,  out_250,  out_251,  out_252,  out_253,  out_254,  out_255;
  input activate, D, C, B, A, H, G, F, E;
  wire multimux_13_out_0, multimux_13_out_1, multimux_13_out_2, multimux_13_out_3, multimux_13_out_4, multimux_13_out_5, multimux_13_out_6, multimux_13_out_7, multimux_13_out_8, multimux_13_out_9, multimux_13_out_10, multimux_13_out_11, multimux_13_out_12, multimux_13_out_13, multimux_13_out_14, multimux_13_out_15, multimux_14_out_0, multimux_14_out_1, multimux_14_out_2, multimux_14_out_3, multimux_14_out_4, multimux_14_out_5, multimux_14_out_6, multimux_14_out_7, multimux_14_out_8, multimux_14_out_9, multimux_14_out_10, multimux_14_out_11, multimux_14_out_12, multimux_14_out_13, multimux_14_out_14, multimux_14_out_15, multimux_16_out_0, multimux_16_out_1, multimux_16_out_2, multimux_16_out_3, multimux_16_out_4, multimux_16_out_5, multimux_16_out_6, multimux_16_out_7, multimux_16_out_8, multimux_16_out_9, multimux_16_out_10, multimux_16_out_11, multimux_16_out_12, multimux_16_out_13, multimux_16_out_14, multimux_16_out_15, multimux_15_out_0, multimux_15_out_1, multimux_15_out_2, multimux_15_out_3, multimux_15_out_4, multimux_15_out_5, multimux_15_out_6, multimux_15_out_7, multimux_15_out_8, multimux_15_out_9, multimux_15_out_10, multimux_15_out_11, multimux_15_out_12, multimux_15_out_13, multimux_15_out_14, multimux_15_out_15, multimux_8_out_0, multimux_8_out_1, multimux_8_out_2, multimux_8_out_3, multimux_8_out_4, multimux_8_out_5, multimux_8_out_6, multimux_8_out_7, multimux_8_out_8, multimux_8_out_9, multimux_8_out_10, multimux_8_out_11, multimux_8_out_12, multimux_8_out_13, multimux_8_out_14, multimux_8_out_15, multimux_7_out_0, multimux_7_out_1, multimux_7_out_2, multimux_7_out_3, multimux_7_out_4, multimux_7_out_5, multimux_7_out_6, multimux_7_out_7, multimux_7_out_8, multimux_7_out_9, multimux_7_out_10, multimux_7_out_11, multimux_7_out_12, multimux_7_out_13, multimux_7_out_14, multimux_7_out_15, multimux_4_out_0, multimux_4_out_1, multimux_4_out_2, multimux_4_out_3, multimux_4_out_4, multimux_4_out_5, multimux_4_out_6, multimux_4_out_7, multimux_4_out_8, multimux_4_out_9, multimux_4_out_10, multimux_4_out_11, multimux_4_out_12, multimux_4_out_13, multimux_4_out_14, multimux_4_out_15, multimux_2_out_0, multimux_2_out_1, multimux_2_out_2, multimux_2_out_3, multimux_2_out_4, multimux_2_out_5, multimux_2_out_6, multimux_2_out_7, multimux_2_out_8, multimux_2_out_9, multimux_2_out_10, multimux_2_out_11, multimux_2_out_12, multimux_2_out_13, multimux_2_out_14, multimux_2_out_15, multimux_11_out_0, multimux_11_out_1, multimux_11_out_2, multimux_11_out_3, multimux_11_out_4, multimux_11_out_5, multimux_11_out_6, multimux_11_out_7, multimux_11_out_8, multimux_11_out_9, multimux_11_out_10, multimux_11_out_11, multimux_11_out_12, multimux_11_out_13, multimux_11_out_14, multimux_11_out_15, multimux_12_out_0, multimux_12_out_1, multimux_12_out_2, multimux_12_out_3, multimux_12_out_4, multimux_12_out_5, multimux_12_out_6, multimux_12_out_7, multimux_12_out_8, multimux_12_out_9, multimux_12_out_10, multimux_12_out_11, multimux_12_out_12, multimux_12_out_13, multimux_12_out_14, multimux_12_out_15, multimux_10_out_0, multimux_10_out_1, multimux_10_out_2, multimux_10_out_3, multimux_10_out_4, multimux_10_out_5, multimux_10_out_6, multimux_10_out_7, multimux_10_out_8, multimux_10_out_9, multimux_10_out_10, multimux_10_out_11, multimux_10_out_12, multimux_10_out_13, multimux_10_out_14, multimux_10_out_15, multimux_9_out_0, multimux_9_out_1, multimux_9_out_2, multimux_9_out_3, multimux_9_out_4, multimux_9_out_5, multimux_9_out_6, multimux_9_out_7, multimux_9_out_8, multimux_9_out_9, multimux_9_out_10, multimux_9_out_11, multimux_9_out_12, multimux_9_out_13, multimux_9_out_14, multimux_9_out_15, multimux_5_out_0, multimux_5_out_1, multimux_5_out_2, multimux_5_out_3, multimux_5_out_4, multimux_5_out_5, multimux_5_out_6, multimux_5_out_7, multimux_5_out_8, multimux_5_out_9, multimux_5_out_10, multimux_5_out_11, multimux_5_out_12, multimux_5_out_13, multimux_5_out_14, multimux_5_out_15, multimux_6_out_0, multimux_6_out_1, multimux_6_out_2, multimux_6_out_3, multimux_6_out_4, multimux_6_out_5, multimux_6_out_6, multimux_6_out_7, multimux_6_out_8, multimux_6_out_9, multimux_6_out_10, multimux_6_out_11, multimux_6_out_12, multimux_6_out_13, multimux_6_out_14, multimux_6_out_15, multimux_3_out_0, multimux_3_out_1, multimux_3_out_2, multimux_3_out_3, multimux_3_out_4, multimux_3_out_5, multimux_3_out_6, multimux_3_out_7, multimux_3_out_8, multimux_3_out_9, multimux_3_out_10, multimux_3_out_11, multimux_3_out_12, multimux_3_out_13, multimux_3_out_14, multimux_3_out_15, multimux_1_out_0, multimux_1_out_1, multimux_1_out_2, multimux_1_out_3, multimux_1_out_4, multimux_1_out_5, multimux_1_out_6, multimux_1_out_7, multimux_1_out_8, multimux_1_out_9, multimux_1_out_10, multimux_1_out_11, multimux_1_out_12, multimux_1_out_13, multimux_1_out_14, multimux_1_out_15, multimux_0_out_0, multimux_0_out_1, multimux_0_out_2, multimux_0_out_3, multimux_0_out_4, multimux_0_out_5, multimux_0_out_6, multimux_0_out_7, multimux_0_out_8, multimux_0_out_9, multimux_0_out_10, multimux_0_out_11, multimux_0_out_12, multimux_0_out_13, multimux_0_out_14, multimux_0_out_15;
  multimux multimux_13(multimux_13_out_0, multimux_13_out_1, multimux_13_out_2, multimux_13_out_3, multimux_13_out_4, multimux_13_out_5, multimux_13_out_6, multimux_13_out_7, multimux_13_out_8, multimux_13_out_9, multimux_13_out_10, multimux_13_out_11, multimux_13_out_12, multimux_13_out_13, multimux_13_out_14, multimux_13_out_15, E, F, G, H, multimux_0_out_15);
  assign out_254 = multimux_13_out_15;
  assign out_253 = multimux_13_out_14;
  assign out_252 = multimux_13_out_13;
  assign out_251 = multimux_13_out_12;
  assign out_250 = multimux_13_out_11;
  assign out_249 = multimux_13_out_10;
  assign out_248 = multimux_13_out_9;
  assign out_247 = multimux_13_out_8;
  assign out_246 = multimux_13_out_7;
  assign out_245 = multimux_13_out_6;
  assign out_244 = multimux_13_out_5;
  assign out_243 = multimux_13_out_4;
  assign out_242 = multimux_13_out_3;
  assign out_241 = multimux_13_out_2;
  assign out_240 = multimux_13_out_1;
  assign out_239 = multimux_13_out_0;
  multimux multimux_14(multimux_14_out_0, multimux_14_out_1, multimux_14_out_2, multimux_14_out_3, multimux_14_out_4, multimux_14_out_5, multimux_14_out_6, multimux_14_out_7, multimux_14_out_8, multimux_14_out_9, multimux_14_out_10, multimux_14_out_11, multimux_14_out_12, multimux_14_out_13, multimux_14_out_14, multimux_14_out_15, E, F, G, H, multimux_0_out_14);
  assign out_238 = multimux_14_out_15;
  assign out_237 = multimux_14_out_14;
  assign out_236 = multimux_14_out_13;
  assign out_235 = multimux_14_out_12;
  assign out_234 = multimux_14_out_11;
  assign out_233 = multimux_14_out_10;
  assign out_232 = multimux_14_out_9;
  assign out_231 = multimux_14_out_8;
  assign out_230 = multimux_14_out_7;
  assign out_229 = multimux_14_out_6;
  assign out_228 = multimux_14_out_5;
  assign out_227 = multimux_14_out_4;
  assign out_226 = multimux_14_out_3;
  assign out_225 = multimux_14_out_2;
  assign out_224 = multimux_14_out_1;
  assign out_223 = multimux_14_out_0;
  multimux multimux_16(multimux_16_out_0, multimux_16_out_1, multimux_16_out_2, multimux_16_out_3, multimux_16_out_4, multimux_16_out_5, multimux_16_out_6, multimux_16_out_7, multimux_16_out_8, multimux_16_out_9, multimux_16_out_10, multimux_16_out_11, multimux_16_out_12, multimux_16_out_13, multimux_16_out_14, multimux_16_out_15, E, F, G, H, multimux_0_out_13);
  assign out_222 = multimux_16_out_15;
  assign out_221 = multimux_16_out_14;
  assign out_220 = multimux_16_out_13;
  assign out_219 = multimux_16_out_12;
  assign out_218 = multimux_16_out_11;
  assign out_217 = multimux_16_out_10;
  assign out_216 = multimux_16_out_9;
  assign out_215 = multimux_16_out_8;
  assign out_214 = multimux_16_out_7;
  assign out_213 = multimux_16_out_6;
  assign out_212 = multimux_16_out_5;
  assign out_211 = multimux_16_out_4;
  assign out_210 = multimux_16_out_3;
  assign out_209 = multimux_16_out_2;
  assign out_208 = multimux_16_out_1;
  assign out_207 = multimux_16_out_0;
  multimux multimux_15(multimux_15_out_0, multimux_15_out_1, multimux_15_out_2, multimux_15_out_3, multimux_15_out_4, multimux_15_out_5, multimux_15_out_6, multimux_15_out_7, multimux_15_out_8, multimux_15_out_9, multimux_15_out_10, multimux_15_out_11, multimux_15_out_12, multimux_15_out_13, multimux_15_out_14, multimux_15_out_15, E, F, G, H, multimux_0_out_12);
  assign out_206 = multimux_15_out_15;
  assign out_205 = multimux_15_out_14;
  assign out_204 = multimux_15_out_13;
  assign out_203 = multimux_15_out_12;
  assign out_202 = multimux_15_out_11;
  assign out_201 = multimux_15_out_10;
  assign out_200 = multimux_15_out_9;
  assign out_199 = multimux_15_out_8;
  assign out_198 = multimux_15_out_7;
  assign out_197 = multimux_15_out_6;
  assign out_196 = multimux_15_out_5;
  assign out_195 = multimux_15_out_4;
  assign out_194 = multimux_15_out_3;
  assign out_193 = multimux_15_out_2;
  assign out_192 = multimux_15_out_1;
  assign out_191 = multimux_15_out_0;
  multimux multimux_8(multimux_8_out_0, multimux_8_out_1, multimux_8_out_2, multimux_8_out_3, multimux_8_out_4, multimux_8_out_5, multimux_8_out_6, multimux_8_out_7, multimux_8_out_8, multimux_8_out_9, multimux_8_out_10, multimux_8_out_11, multimux_8_out_12, multimux_8_out_13, multimux_8_out_14, multimux_8_out_15, E, F, G, H, multimux_0_out_11);
  assign out_190 = multimux_8_out_15;
  assign out_189 = multimux_8_out_14;
  assign out_188 = multimux_8_out_13;
  assign out_187 = multimux_8_out_12;
  assign out_186 = multimux_8_out_11;
  assign out_185 = multimux_8_out_10;
  assign out_184 = multimux_8_out_9;
  assign out_183 = multimux_8_out_8;
  assign out_182 = multimux_8_out_7;
  assign out_181 = multimux_8_out_6;
  assign out_180 = multimux_8_out_5;
  assign out_179 = multimux_8_out_4;
  assign out_178 = multimux_8_out_3;
  assign out_177 = multimux_8_out_2;
  assign out_176 = multimux_8_out_1;
  assign out_175 = multimux_8_out_0;
  multimux multimux_7(multimux_7_out_0, multimux_7_out_1, multimux_7_out_2, multimux_7_out_3, multimux_7_out_4, multimux_7_out_5, multimux_7_out_6, multimux_7_out_7, multimux_7_out_8, multimux_7_out_9, multimux_7_out_10, multimux_7_out_11, multimux_7_out_12, multimux_7_out_13, multimux_7_out_14, multimux_7_out_15, E, F, G, H, multimux_0_out_10);
  assign out_174 = multimux_7_out_15;
  assign out_173 = multimux_7_out_14;
  assign out_172 = multimux_7_out_13;
  assign out_171 = multimux_7_out_12;
  assign out_170 = multimux_7_out_11;
  assign out_169 = multimux_7_out_10;
  assign out_168 = multimux_7_out_9;
  assign out_167 = multimux_7_out_8;
  assign out_166 = multimux_7_out_7;
  assign out_165 = multimux_7_out_6;
  assign out_164 = multimux_7_out_5;
  assign out_163 = multimux_7_out_4;
  assign out_162 = multimux_7_out_3;
  assign out_161 = multimux_7_out_2;
  assign out_160 = multimux_7_out_1;
  assign out_159 = multimux_7_out_0;
  multimux multimux_4(multimux_4_out_0, multimux_4_out_1, multimux_4_out_2, multimux_4_out_3, multimux_4_out_4, multimux_4_out_5, multimux_4_out_6, multimux_4_out_7, multimux_4_out_8, multimux_4_out_9, multimux_4_out_10, multimux_4_out_11, multimux_4_out_12, multimux_4_out_13, multimux_4_out_14, multimux_4_out_15, E, F, G, H, multimux_0_out_9);
  assign out_158 = multimux_4_out_15;
  assign out_157 = multimux_4_out_14;
  assign out_156 = multimux_4_out_13;
  assign out_155 = multimux_4_out_12;
  assign out_154 = multimux_4_out_11;
  assign out_153 = multimux_4_out_10;
  assign out_152 = multimux_4_out_9;
  assign out_151 = multimux_4_out_8;
  assign out_150 = multimux_4_out_7;
  assign out_149 = multimux_4_out_6;
  assign out_148 = multimux_4_out_5;
  assign out_147 = multimux_4_out_4;
  assign out_146 = multimux_4_out_3;
  assign out_145 = multimux_4_out_2;
  assign out_144 = multimux_4_out_1;
  assign out_143 = multimux_4_out_0;
  multimux multimux_2(multimux_2_out_0, multimux_2_out_1, multimux_2_out_2, multimux_2_out_3, multimux_2_out_4, multimux_2_out_5, multimux_2_out_6, multimux_2_out_7, multimux_2_out_8, multimux_2_out_9, multimux_2_out_10, multimux_2_out_11, multimux_2_out_12, multimux_2_out_13, multimux_2_out_14, multimux_2_out_15, E, F, G, H, multimux_0_out_8);
  assign out_142 = multimux_2_out_15;
  assign out_141 = multimux_2_out_14;
  assign out_140 = multimux_2_out_13;
  assign out_139 = multimux_2_out_12;
  assign out_138 = multimux_2_out_11;
  assign out_137 = multimux_2_out_10;
  assign out_136 = multimux_2_out_9;
  assign out_135 = multimux_2_out_8;
  assign out_134 = multimux_2_out_7;
  assign out_133 = multimux_2_out_6;
  assign out_132 = multimux_2_out_5;
  assign out_131 = multimux_2_out_4;
  assign out_130 = multimux_2_out_3;
  assign out_129 = multimux_2_out_2;
  assign out_128 = multimux_2_out_1;
  assign out_127 = multimux_2_out_0;
  multimux multimux_11(multimux_11_out_0, multimux_11_out_1, multimux_11_out_2, multimux_11_out_3, multimux_11_out_4, multimux_11_out_5, multimux_11_out_6, multimux_11_out_7, multimux_11_out_8, multimux_11_out_9, multimux_11_out_10, multimux_11_out_11, multimux_11_out_12, multimux_11_out_13, multimux_11_out_14, multimux_11_out_15, E, F, G, H, multimux_0_out_0);
  assign \15  = multimux_11_out_15;
  assign \14  = multimux_11_out_14;
  assign \13  = multimux_11_out_13;
  assign \12  = multimux_11_out_12;
  assign \11  = multimux_11_out_11;
  assign \10  = multimux_11_out_10;
  assign \9  = multimux_11_out_9;
  assign \8  = multimux_11_out_8;
  assign \7  = multimux_11_out_7;
  assign \6  = multimux_11_out_6;
  assign \5  = multimux_11_out_5;
  assign \4  = multimux_11_out_4;
  assign \3  = multimux_11_out_3;
  assign \2  = multimux_11_out_2;
  assign \1  = multimux_11_out_1;
  assign \0  = multimux_11_out_0;
  multimux multimux_12(multimux_12_out_0, multimux_12_out_1, multimux_12_out_2, multimux_12_out_3, multimux_12_out_4, multimux_12_out_5, multimux_12_out_6, multimux_12_out_7, multimux_12_out_8, multimux_12_out_9, multimux_12_out_10, multimux_12_out_11, multimux_12_out_12, multimux_12_out_13, multimux_12_out_14, multimux_12_out_15, E, F, G, H, multimux_0_out_1);
  assign out_31 = multimux_12_out_15;
  assign out_30 = multimux_12_out_14;
  assign out_29 = multimux_12_out_13;
  assign out_28 = multimux_12_out_12;
  assign out_27 = multimux_12_out_11;
  assign out_26 = multimux_12_out_10;
  assign out_25 = multimux_12_out_9;
  assign out_24 = multimux_12_out_8;
  assign out_23 = multimux_12_out_7;
  assign out_22 = multimux_12_out_6;
  assign out_21 = multimux_12_out_5;
  assign out_20 = multimux_12_out_4;
  assign out_19 = multimux_12_out_3;
  assign out_18 = multimux_12_out_2;
  assign out_17 = multimux_12_out_1;
  assign out_16 = multimux_12_out_0;
  multimux multimux_10(multimux_10_out_0, multimux_10_out_1, multimux_10_out_2, multimux_10_out_3, multimux_10_out_4, multimux_10_out_5, multimux_10_out_6, multimux_10_out_7, multimux_10_out_8, multimux_10_out_9, multimux_10_out_10, multimux_10_out_11, multimux_10_out_12, multimux_10_out_13, multimux_10_out_14, multimux_10_out_15, E, F, G, H, multimux_0_out_2);
  assign out_47 = multimux_10_out_15;
  assign out_46 = multimux_10_out_14;
  assign out_45 = multimux_10_out_13;
  assign out_44 = multimux_10_out_12;
  assign out_43 = multimux_10_out_11;
  assign out_42 = multimux_10_out_10;
  assign out_41 = multimux_10_out_9;
  assign out_40 = multimux_10_out_8;
  assign out_39 = multimux_10_out_7;
  assign out_38 = multimux_10_out_6;
  assign out_37 = multimux_10_out_5;
  assign out_36 = multimux_10_out_4;
  assign out_35 = multimux_10_out_3;
  assign out_34 = multimux_10_out_2;
  assign out_33 = multimux_10_out_1;
  assign out_32 = multimux_10_out_0;
  multimux multimux_9(multimux_9_out_0, multimux_9_out_1, multimux_9_out_2, multimux_9_out_3, multimux_9_out_4, multimux_9_out_5, multimux_9_out_6, multimux_9_out_7, multimux_9_out_8, multimux_9_out_9, multimux_9_out_10, multimux_9_out_11, multimux_9_out_12, multimux_9_out_13, multimux_9_out_14, multimux_9_out_15, E, F, G, H, multimux_0_out_3);
  assign out_63 = multimux_9_out_15;
  assign out_62 = multimux_9_out_14;
  assign out_61 = multimux_9_out_13;
  assign out_60 = multimux_9_out_12;
  assign out_59 = multimux_9_out_11;
  assign out_58 = multimux_9_out_10;
  assign out_57 = multimux_9_out_9;
  assign out_56 = multimux_9_out_8;
  assign out_55 = multimux_9_out_7;
  assign out_54 = multimux_9_out_6;
  assign out_53 = multimux_9_out_5;
  assign out_52 = multimux_9_out_4;
  assign out_51 = multimux_9_out_3;
  assign out_50 = multimux_9_out_2;
  assign out_49 = multimux_9_out_1;
  assign out_48 = multimux_9_out_0;
  multimux multimux_5(multimux_5_out_0, multimux_5_out_1, multimux_5_out_2, multimux_5_out_3, multimux_5_out_4, multimux_5_out_5, multimux_5_out_6, multimux_5_out_7, multimux_5_out_8, multimux_5_out_9, multimux_5_out_10, multimux_5_out_11, multimux_5_out_12, multimux_5_out_13, multimux_5_out_14, multimux_5_out_15, E, F, G, H, multimux_0_out_4);
  assign out_79 = multimux_5_out_15;
  assign out_78 = multimux_5_out_14;
  assign out_77 = multimux_5_out_13;
  assign out_76 = multimux_5_out_12;
  assign out_75 = multimux_5_out_11;
  assign out_74 = multimux_5_out_10;
  assign out_73 = multimux_5_out_9;
  assign out_72 = multimux_5_out_8;
  assign out_71 = multimux_5_out_7;
  assign out_70 = multimux_5_out_6;
  assign out_69 = multimux_5_out_5;
  assign out_68 = multimux_5_out_4;
  assign out_67 = multimux_5_out_3;
  assign out_66 = multimux_5_out_2;
  assign out_65 = multimux_5_out_1;
  assign out_64 = multimux_5_out_0;
  multimux multimux_6(multimux_6_out_0, multimux_6_out_1, multimux_6_out_2, multimux_6_out_3, multimux_6_out_4, multimux_6_out_5, multimux_6_out_6, multimux_6_out_7, multimux_6_out_8, multimux_6_out_9, multimux_6_out_10, multimux_6_out_11, multimux_6_out_12, multimux_6_out_13, multimux_6_out_14, multimux_6_out_15, E, F, G, H, multimux_0_out_5);
  assign out_94 = multimux_6_out_15;
  assign out_93 = multimux_6_out_14;
  assign out_92 = multimux_6_out_13;
  assign out_91 = multimux_6_out_12;
  assign out_90 = multimux_6_out_11;
  assign out_89 = multimux_6_out_10;
  assign out_88 = multimux_6_out_9;
  assign out_87 = multimux_6_out_8;
  assign out_86 = multimux_6_out_7;
  assign out_85 = multimux_6_out_6;
  assign out_84 = multimux_6_out_5;
  assign out_83 = multimux_6_out_4;
  assign out_82 = multimux_6_out_3;
  assign out_255 = multimux_6_out_2;
  assign out_81 = multimux_6_out_1;
  assign out_80 = multimux_6_out_0;
  multimux multimux_3(multimux_3_out_0, multimux_3_out_1, multimux_3_out_2, multimux_3_out_3, multimux_3_out_4, multimux_3_out_5, multimux_3_out_6, multimux_3_out_7, multimux_3_out_8, multimux_3_out_9, multimux_3_out_10, multimux_3_out_11, multimux_3_out_12, multimux_3_out_13, multimux_3_out_14, multimux_3_out_15, E, F, G, H, multimux_0_out_6);
  assign out_110 = multimux_3_out_15;
  assign out_109 = multimux_3_out_14;
  assign out_108 = multimux_3_out_13;
  assign out_107 = multimux_3_out_12;
  assign out_106 = multimux_3_out_11;
  assign out_105 = multimux_3_out_10;
  assign out_104 = multimux_3_out_9;
  assign out_103 = multimux_3_out_8;
  assign out_102 = multimux_3_out_7;
  assign out_101 = multimux_3_out_6;
  assign out_100 = multimux_3_out_5;
  assign out_99 = multimux_3_out_4;
  assign out_98 = multimux_3_out_3;
  assign out_97 = multimux_3_out_2;
  assign out_96 = multimux_3_out_1;
  assign out_95 = multimux_3_out_0;
  multimux multimux_1(multimux_1_out_0, multimux_1_out_1, multimux_1_out_2, multimux_1_out_3, multimux_1_out_4, multimux_1_out_5, multimux_1_out_6, multimux_1_out_7, multimux_1_out_8, multimux_1_out_9, multimux_1_out_10, multimux_1_out_11, multimux_1_out_12, multimux_1_out_13, multimux_1_out_14, multimux_1_out_15, E, F, G, H, multimux_0_out_7);
  assign out_126 = multimux_1_out_15;
  assign out_125 = multimux_1_out_14;
  assign out_124 = multimux_1_out_13;
  assign out_123 = multimux_1_out_12;
  assign out_122 = multimux_1_out_11;
  assign out_121 = multimux_1_out_10;
  assign out_120 = multimux_1_out_9;
  assign out_119 = multimux_1_out_8;
  assign out_118 = multimux_1_out_7;
  assign out_117 = multimux_1_out_6;
  assign out_116 = multimux_1_out_5;
  assign out_115 = multimux_1_out_4;
  assign out_114 = multimux_1_out_3;
  assign out_113 = multimux_1_out_2;
  assign out_112 = multimux_1_out_1;
  assign out_111 = multimux_1_out_0;
  multimux multimux_0(multimux_0_out_0, multimux_0_out_1, multimux_0_out_2, multimux_0_out_3, multimux_0_out_4, multimux_0_out_5, multimux_0_out_6, multimux_0_out_7, multimux_0_out_8, multimux_0_out_9, multimux_0_out_10, multimux_0_out_11, multimux_0_out_12, multimux_0_out_13, multimux_0_out_14, multimux_0_out_15, A, B, C, D, activate);
endmodule

module decode(out_0, inp_0);
  output [7:0] out_0;
  input [7:0] inp_0;
  assign out_0 = inp_0;
endmodule



module cpt8(cpt, activate, clk, reset);
  output [7:0] cpt;
  input activate, clk, reset;
  wire dflipflop_0_out_0, dflipflop_0_out_1, dflipflop_1_out_0, dflipflop_1_out_1, dflipflop_2_out_0, dflipflop_2_out_1, dflipflop_3_out_0, dflipflop_3_out_1, dflipflop_4_out_0, dflipflop_4_out_1, dflipflop_5_out_0, dflipflop_5_out_1, dflipflop_6_out_0, dflipflop_6_out_1, dflipflop_7_out_0, dflipflop_7_out_1, nor_3_out, and_1_out, or_0_out, and_0_out, nor_2_out, nor_1_out, nor_0_out;
  wire [7:0] Splitter_0_cmb;
  dflipflop dflipflop_0(dflipflop_0_out_0, dflipflop_0_out_1, and_0_out, clk, reset);
  dflipflop dflipflop_1(dflipflop_1_out_0, dflipflop_1_out_1, dflipflop_0_out_0, clk, reset);
  dflipflop dflipflop_2(dflipflop_2_out_0, dflipflop_2_out_1, dflipflop_1_out_0, clk, reset);
  dflipflop dflipflop_3(dflipflop_3_out_0, dflipflop_3_out_1, dflipflop_2_out_0, clk, reset);
  dflipflop dflipflop_4(dflipflop_4_out_0, dflipflop_4_out_1, dflipflop_3_out_0, clk, reset);
  dflipflop dflipflop_5(dflipflop_5_out_0, dflipflop_5_out_1, dflipflop_4_out_0, clk, reset);
  dflipflop dflipflop_6(dflipflop_6_out_0, dflipflop_6_out_1, dflipflop_5_out_0, clk, reset);
  dflipflop dflipflop_7(dflipflop_7_out_0, dflipflop_7_out_1, dflipflop_6_out_0, clk, reset);
  assign Splitter_0_cmb = {dflipflop_7_out_0,dflipflop_6_out_0,dflipflop_5_out_0,dflipflop_4_out_0,dflipflop_3_out_0,dflipflop_2_out_0,dflipflop_1_out_0,dflipflop_0_out_0};
  assign cpt = Splitter_0_cmb;
  assign nor_3_out = ~(dflipflop_6_out_0 | dflipflop_7_out_0);
  assign and_1_out = nor_1_out & nor_0_out & nor_2_out & nor_3_out;
  assign or_0_out = and_1_out | dflipflop_7_out_0;
  assign and_0_out = activate & or_0_out;
  assign nor_2_out = ~(dflipflop_4_out_0 | dflipflop_5_out_0);
  assign nor_1_out = ~(dflipflop_2_out_0 | dflipflop_3_out_0);
  assign nor_0_out = ~(dflipflop_0_out_0 | dflipflop_1_out_0);
endmodule

module JKlatchUP(s1, s2, J, K, clk, reset);
  output s1,  s2;
  input J, K, clk, reset;
  wire or_1_out, nand_5_out, nor_0_out, nor_1_out, or_0_out, nand_3_out, nand_1_out, nand_2_out, nand_0_out, nand_4_out, not_0_out;
  assign or_1_out = nand_1_out | reset;
  assign nand_5_out = ~(J & or_1_out & not_0_out);
  assign nor_0_out = ~(nand_5_out | or_0_out);
  assign nor_1_out = ~(nor_0_out | nand_4_out);
  assign or_0_out = nor_1_out | reset;
  assign nand_3_out = ~(clk & nor_1_out);
  assign nand_1_out = ~(nand_0_out & nand_3_out);
  assign s2 = nand_1_out;
  assign nand_2_out = ~(nor_0_out & clk);
  assign nand_0_out = ~(nand_2_out & or_1_out);
  assign s1 = nand_0_out;
  assign nand_4_out = ~(not_0_out & nand_0_out & K);
  assign not_0_out = ~clk;
endmodule


module cptbin(out, activate, reset, clk);
  output [7:0] out;
  input activate, reset, clk;
  wire and_0_out, JKlatchUP_0_out_0, JKlatchUP_0_out_1, JKlatchUP_1_out_0, JKlatchUP_1_out_1, JKlatchUP_2_out_0, JKlatchUP_2_out_1, JKlatchUP_3_out_0, JKlatchUP_3_out_1, JKlatchUP_4_out_0, JKlatchUP_4_out_1, JKlatchUP_5_out_0, JKlatchUP_5_out_1, JKlatchUP_6_out_0, JKlatchUP_6_out_1, JKlatchUP_7_out_0, JKlatchUP_7_out_1, const_0;
  wire [7:0] Splitter_0_cmb;
  assign and_0_out = activate & clk;
  JKlatchUP JKlatchUP_0(JKlatchUP_0_out_0, JKlatchUP_0_out_1, const_0, const_0, and_0_out, reset);
  JKlatchUP JKlatchUP_1(JKlatchUP_1_out_0, JKlatchUP_1_out_1, const_0, const_0, JKlatchUP_0_out_1, reset);
  JKlatchUP JKlatchUP_2(JKlatchUP_2_out_0, JKlatchUP_2_out_1, const_0, const_0, JKlatchUP_1_out_1, reset);
  JKlatchUP JKlatchUP_3(JKlatchUP_3_out_0, JKlatchUP_3_out_1, const_0, const_0, JKlatchUP_2_out_1, reset);
  JKlatchUP JKlatchUP_4(JKlatchUP_4_out_0, JKlatchUP_4_out_1, const_0, const_0, JKlatchUP_3_out_1, reset);
  JKlatchUP JKlatchUP_5(JKlatchUP_5_out_0, JKlatchUP_5_out_1, const_0, const_0, JKlatchUP_4_out_1, reset);
  JKlatchUP JKlatchUP_6(JKlatchUP_6_out_0, JKlatchUP_6_out_1, const_0, const_0, JKlatchUP_5_out_1, reset);
  JKlatchUP JKlatchUP_7(JKlatchUP_7_out_0, JKlatchUP_7_out_1, const_0, const_0, JKlatchUP_6_out_1, reset);
  assign Splitter_0_cmb = {JKlatchUP_7_out_0,JKlatchUP_6_out_0,JKlatchUP_5_out_0,JKlatchUP_4_out_0,JKlatchUP_3_out_0,JKlatchUP_2_out_0,JKlatchUP_1_out_0,JKlatchUP_0_out_0};
  assign out = Splitter_0_cmb;
  assign const_0 = 1'b1;
endmodule









module alucombi(out1, A, B, OP);
  output [7:0] out1;
  input [7:0] A, B, OP;
  wire cmp8_4_out_0, cmp8_4_out_1, cmp8_4_out_2, add8_0_out_1, const_1, Ground_0_out;
  wire [4:0] const_0;
  wire [7:0] Multiplexer_0_out, Demultiplexer_1_out_0, Demultiplexer_1_out_1, Demultiplexer_1_out_2, Demultiplexer_1_out_3, Demultiplexer_1_out_4, Demultiplexer_1_out_5, Demultiplexer_1_out_6, Demultiplexer_1_out_7, Splitter_0_cmb, xor8_3_out, or8_2_out, and8_1_out, mult8combi_5_out_0, mult8combi_5_out_1, or_1_out, add8_0_out_0, Demultiplexer_0_out_0, Demultiplexer_0_out_1, Demultiplexer_0_out_2, Demultiplexer_0_out_3, Demultiplexer_0_out_4, Demultiplexer_0_out_5, Demultiplexer_0_out_6, Demultiplexer_0_out_7, or_0_out;
  wire [15:0] mult8combi_5_out_2;
  
  Multiplexer16 #(8) Multiplexer_0(Multiplexer_0_out, Demultiplexer_0_out_0, Demultiplexer_1_out_0, , , , , , , , , , , , , , , OP[3:0]);
  assign out1 = Multiplexer_0_out;
  Demultiplexer16 Demultiplexer_2(, , , , , , , , , , , , , , , , const_1, OP[3:0]);
  Demultiplexer16 #(8) Demultiplexer_1(, Demultiplexer_1_out_0, Demultiplexer_1_out_1, Demultiplexer_1_out_2, Demultiplexer_1_out_3, Demultiplexer_1_out_4, Demultiplexer_1_out_5, Demultiplexer_1_out_6, Demultiplexer_1_out_7, , , , , , , , A, OP[3:0]);
  cmp8 cmp8_4(cmp8_4_out_0, cmp8_4_out_1, cmp8_4_out_2, Demultiplexer_0_out_7, Demultiplexer_1_out_7);
  assign Splitter_0_cmb = {const_0,cmp8_4_out_2,cmp8_4_out_0,cmp8_4_out_1};
  xor8 xor8_3(xor8_3_out, Demultiplexer_0_out_6, Demultiplexer_1_out_6);
  or8 or8_2(or8_2_out, Demultiplexer_0_out_5, Demultiplexer_1_out_5);
  and8 and8_1(and8_1_out, Demultiplexer_0_out_4, Demultiplexer_1_out_4);
  mult8combi mult8combi_5(mult8combi_5_out_0, mult8combi_5_out_1, mult8combi_5_out_2, Demultiplexer_0_out_3, Demultiplexer_1_out_3);
  assign or_1_out = Demultiplexer_1_out_1 | Demultiplexer_1_out_2;
  add8 add8_0(add8_0_out_0, add8_0_out_1, , or_1_out, or_0_out, Ground_0_out);
  Demultiplexer16 #(8) Demultiplexer_0(Demultiplexer_0_out_0, , Demultiplexer_0_out_1, Demultiplexer_0_out_2, Demultiplexer_0_out_3, Demultiplexer_0_out_4, Demultiplexer_0_out_5, Demultiplexer_0_out_6, Demultiplexer_0_out_7, , , , , , , , B, OP[3:0]);
  assign or_0_out = Demultiplexer_0_out_1 | Demultiplexer_0_out_2;
  assign const_1 = 1'b1;
  assign const_0 = 5'b00000;
  assign Ground_0_out = 1'b0;
endmodule

module seq_add(S, A, \R/L );
  output [7:0] S;
  input \R/L ;
  input [7:0] A;
  wire and_10_out, or_5_out, and_12_out, and_8_out, or_4_out, and_6_out, or_3_out, and_4_out, or_1_out, and_2_out, or_2_out, and_0_out, or_0_out, not_0_out, and_11_out, and_13_out, and_9_out, and_7_out, and_5_out, and_3_out, and_1_out;
  wire [7:0] Splitter_1_cmb;
  assign and_10_out = A[5] & \R/L ;
  assign or_5_out = and_10_out | and_13_out;
  assign Splitter_1_cmb = {and_12_out,or_5_out,or_4_out,or_3_out,or_1_out,or_2_out,or_0_out,and_1_out};
  assign S = Splitter_1_cmb;
  assign and_12_out = A[6] & \R/L ;
  assign and_8_out = A[4] & \R/L ;
  assign or_4_out = and_8_out | and_11_out;
  assign and_6_out = A[3] & \R/L ;
  assign or_3_out = and_6_out | and_9_out;
  assign and_4_out = A[2] & \R/L ;
  assign or_1_out = and_4_out | and_7_out;
  assign and_2_out = A[1] & \R/L ;
  assign or_2_out = and_2_out | and_5_out;
  assign and_0_out = A[0] & \R/L ;
  assign or_0_out = and_0_out | and_3_out;
  assign not_0_out = ~\R/L ;
  assign and_11_out = not_0_out & A[6];
  assign and_13_out = not_0_out & A[7];
  assign and_9_out = not_0_out & A[5];
  assign and_7_out = not_0_out & A[4];
  assign and_5_out = not_0_out & A[3];
  assign and_3_out = not_0_out & A[2];
  assign and_1_out = not_0_out & A[1];
  
endmodule

module multiplexeur(z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, s0);
  output z;
  input a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p;
  input [3:0] s0;
  wire and_15_out, or_0_out, or_2_out, and_14_out, and_13_out, and_12_out, and_11_out, and_10_out, and_9_out, and_8_out, not_3_out, and_7_out, or_1_out, and_6_out, and_5_out, and_4_out, and_3_out, and_2_out, and_1_out, and_0_out, not_2_out, not_1_out, not_0_out;
  
  assign and_15_out = s0[2] & s0[3] & s0[1] & s0[0] & p;
  assign or_0_out = and_8_out | and_9_out | and_10_out | and_11_out | and_12_out | and_13_out | and_14_out | and_15_out;
  assign or_2_out = or_1_out | or_0_out;
  assign z = or_2_out;
  assign and_14_out = s0[2] & s0[3] & s0[1] & not_0_out & o;
  assign and_13_out = s0[2] & s0[3] & not_1_out & s0[0] & n;
  assign and_12_out = s0[2] & s0[3] & not_1_out & not_0_out & m;
  assign and_11_out = not_2_out & s0[3] & s0[1] & s0[0] & l;
  assign and_10_out = not_2_out & s0[3] & s0[1] & not_0_out & k;
  assign and_9_out = not_2_out & s0[3] & not_1_out & s0[0] & j;
  assign and_8_out = not_2_out & s0[3] & not_1_out & not_0_out & i;
  assign not_3_out = ~s0[3];
  assign and_7_out = s0[2] & not_3_out & s0[1] & s0[0] & h;
  assign or_1_out = and_0_out | and_1_out | and_2_out | and_3_out | and_4_out | and_5_out | and_6_out | and_7_out;
  assign and_6_out = s0[2] & not_3_out & s0[1] & not_0_out & g;
  assign and_5_out = s0[2] & not_3_out & not_1_out & s0[0] & f;
  assign and_4_out = s0[2] & not_3_out & not_1_out & not_0_out & e;
  assign and_3_out = not_2_out & not_3_out & s0[1] & s0[0] & d;
  assign and_2_out = not_2_out & not_3_out & s0[1] & not_0_out & c;
  assign and_1_out = not_2_out & not_3_out & not_1_out & s0[0] & b;
  assign and_0_out = not_2_out & not_3_out & not_1_out & not_0_out & a;
  assign not_2_out = ~s0[2];
  assign not_1_out = ~s0[1];
  assign not_0_out = ~s0[0];
endmodule

module demultiplexeur(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, s0, in);
  output a,  b,  c,  d,  e,  f,  g,  h,  i,  j,  k,  l,  m,  n,  o,  p;
  input in;
  input [3:0] s0;
  wire and_14_out, and_13_out, and_12_out, and_11_out, and_15_out, and_10_out, and_9_out, and_8_out, and_7_out, and_6_out, and_5_out, and_4_out, and_3_out, and_2_out, and_1_out, and_0_out, not_0_out, not_1_out, not_2_out, not_3_out;
  assign and_14_out = s0[2] & s0[3] & s0[1] & s0[0] & in;
  assign p = and_14_out;
  assign and_13_out = s0[2] & s0[3] & s0[1] & not_3_out & in;
  assign o = and_13_out;
  assign and_12_out = s0[2] & s0[3] & not_2_out & s0[0] & in;
  assign n = and_12_out;
  assign and_11_out = s0[2] & s0[3] & not_2_out & not_3_out & in;
  assign m = and_11_out;
  assign and_15_out = not_1_out & s0[3] & s0[1] & s0[0] & in;
  assign l = and_15_out;
  assign and_10_out = not_1_out & s0[3] & s0[1] & not_3_out & in;
  assign k = and_10_out;
  assign and_9_out = not_1_out & s0[3] & not_2_out & s0[0] & in;
  assign j = and_9_out;
  assign and_8_out = not_1_out & s0[3] & not_2_out & not_3_out & in;
  assign i = and_8_out;
  assign and_7_out = s0[2] & not_0_out & s0[1] & s0[0] & in;
  assign h = and_7_out;
  assign and_6_out = s0[2] & not_0_out & s0[1] & not_3_out & in;
  assign g = and_6_out;
  assign and_5_out = s0[2] & not_0_out & not_2_out & s0[0] & in;
  assign f = and_5_out;
  assign and_4_out = s0[2] & not_0_out & not_2_out & not_3_out & in;
  assign e = and_4_out;
  assign and_3_out = not_1_out & not_0_out & s0[1] & s0[0] & in;
  assign d = and_3_out;
  assign and_2_out = not_1_out & not_0_out & s0[1] & not_3_out & in;
  assign c = and_2_out;
  assign and_1_out = not_1_out & not_0_out & not_2_out & s0[0] & in;
  assign b = and_1_out;
  assign and_0_out = not_1_out & not_0_out & not_2_out & not_3_out & in;
  assign a = and_0_out;
  
  assign not_0_out = ~s0[3];
  assign not_1_out = ~s0[2];
  assign not_2_out = ~s0[1];
  assign not_3_out = ~s0[0];
endmodule

module multiplexeur8(out_0, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, s0);
  output [7:0] out_0;
  input [3:0] s0;
  input [7:0] a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p;
  wire and_8_out, and_9_out, and_10_out, and_11_out, and_12_out, and_13_out, and_14_out, and_15_out, not_3_out, and_0_out, and_1_out, and_2_out, and_3_out, and_4_out, and_5_out, and_6_out, and_7_out, not_2_out, not_1_out, not_0_out;
  wire [7:0] Splitter_9_cmb, and_24_out, or_0_out, or_2_out, Splitter_10_cmb, and_25_out, Splitter_11_cmb, and_26_out, Splitter_12_cmb, and_27_out, Splitter_13_cmb, and_28_out, Splitter_14_cmb, and_29_out, Splitter_15_cmb, and_30_out, Splitter_16_cmb, and_31_out, Splitter_1_cmb, and_16_out, or_1_out, Splitter_2_cmb, and_17_out, Splitter_3_cmb, and_18_out, Splitter_4_cmb, and_19_out, Splitter_5_cmb, and_20_out, Splitter_6_cmb, and_21_out, Splitter_7_cmb, and_22_out, Splitter_8_cmb, and_23_out;
  
  assign and_8_out = not_2_out & s0[3] & not_1_out & not_0_out;
  assign Splitter_9_cmb = {and_8_out,and_8_out,and_8_out,and_8_out,and_8_out,and_8_out,and_8_out,and_8_out};
  assign and_24_out = Splitter_9_cmb & i;
  assign or_0_out = and_24_out | and_25_out | and_26_out | and_27_out | and_28_out | and_29_out | and_30_out | and_31_out;
  assign or_2_out = or_1_out | or_0_out;
  assign out_0 = or_2_out;
  assign and_9_out = not_2_out & s0[3] & not_1_out & s0[0];
  assign Splitter_10_cmb = {and_9_out,and_9_out,and_9_out,and_9_out,and_9_out,and_9_out,and_9_out,and_9_out};
  assign and_25_out = Splitter_10_cmb & j;
  assign and_10_out = not_2_out & s0[3] & s0[1] & not_0_out;
  assign Splitter_11_cmb = {and_10_out,and_10_out,and_10_out,and_10_out,and_10_out,and_10_out,and_10_out,and_10_out};
  assign and_26_out = Splitter_11_cmb & k;
  assign and_11_out = not_2_out & s0[3] & s0[1] & s0[0];
  assign Splitter_12_cmb = {and_11_out,and_11_out,and_11_out,and_11_out,and_11_out,and_11_out,and_11_out,and_11_out};
  assign and_27_out = Splitter_12_cmb & l;
  assign and_12_out = s0[2] & s0[3] & not_1_out & not_0_out;
  assign Splitter_13_cmb = {and_12_out,and_12_out,and_12_out,and_12_out,and_12_out,and_12_out,and_12_out,and_12_out};
  assign and_28_out = Splitter_13_cmb & m;
  assign and_13_out = s0[2] & s0[3] & not_1_out & s0[0];
  assign Splitter_14_cmb = {and_13_out,and_13_out,and_13_out,and_13_out,and_13_out,and_13_out,and_13_out,and_13_out};
  assign and_29_out = Splitter_14_cmb & n;
  assign and_14_out = s0[2] & s0[3] & s0[1] & not_0_out;
  assign Splitter_15_cmb = {and_14_out,and_14_out,and_14_out,and_14_out,and_14_out,and_14_out,and_14_out,and_14_out};
  assign and_30_out = Splitter_15_cmb & o;
  assign and_15_out = s0[2] & s0[3] & s0[1] & s0[0];
  assign Splitter_16_cmb = {and_15_out,and_15_out,and_15_out,and_15_out,and_15_out,and_15_out,and_15_out,and_15_out};
  assign and_31_out = Splitter_16_cmb & p;
  assign not_3_out = ~s0[3];
  assign and_0_out = not_2_out & not_3_out & not_1_out & not_0_out;
  assign Splitter_1_cmb = {and_0_out,and_0_out,and_0_out,and_0_out,and_0_out,and_0_out,and_0_out,and_0_out};
  assign and_16_out = Splitter_1_cmb & a;
  assign or_1_out = and_16_out | and_17_out | and_18_out | and_19_out | and_20_out | and_21_out | and_22_out | and_23_out;
  assign and_1_out = not_2_out & not_3_out & not_1_out & s0[0];
  assign Splitter_2_cmb = {and_1_out,and_1_out,and_1_out,and_1_out,and_1_out,and_1_out,and_1_out,and_1_out};
  assign and_17_out = Splitter_2_cmb & b;
  assign and_2_out = not_2_out & not_3_out & s0[1] & not_0_out;
  assign Splitter_3_cmb = {and_2_out,and_2_out,and_2_out,and_2_out,and_2_out,and_2_out,and_2_out,and_2_out};
  assign and_18_out = Splitter_3_cmb & c;
  assign and_3_out = not_2_out & not_3_out & s0[1] & s0[0];
  assign Splitter_4_cmb = {and_3_out,and_3_out,and_3_out,and_3_out,and_3_out,and_3_out,and_3_out,and_3_out};
  assign and_19_out = Splitter_4_cmb & d;
  assign and_4_out = s0[2] & not_3_out & not_1_out & not_0_out;
  assign Splitter_5_cmb = {and_4_out,and_4_out,and_4_out,and_4_out,and_4_out,and_4_out,and_4_out,and_4_out};
  assign and_20_out = Splitter_5_cmb & e;
  assign and_5_out = s0[2] & not_3_out & not_1_out & s0[0];
  assign Splitter_6_cmb = {and_5_out,and_5_out,and_5_out,and_5_out,and_5_out,and_5_out,and_5_out,and_5_out};
  assign and_21_out = Splitter_6_cmb & f;
  assign and_6_out = s0[2] & not_3_out & s0[1] & not_0_out;
  assign Splitter_7_cmb = {and_6_out,and_6_out,and_6_out,and_6_out,and_6_out,and_6_out,and_6_out,and_6_out};
  assign and_22_out = Splitter_7_cmb & g;
  assign and_7_out = s0[2] & not_3_out & s0[1] & s0[0];
  assign Splitter_8_cmb = {and_7_out,and_7_out,and_7_out,and_7_out,and_7_out,and_7_out,and_7_out,and_7_out};
  assign and_23_out = Splitter_8_cmb & h;
  assign not_2_out = ~s0[2];
  assign not_1_out = ~s0[1];
  assign not_0_out = ~s0[0];
endmodule

module demultiplexeur8(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, in, s0);
  output [7:0] a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p;
  input [3:0] s0;
  input [7:0] in;
  wire and_8_out, and_9_out, and_10_out, and_11_out, and_12_out, and_13_out, and_14_out, and_15_out, not_3_out, and_0_out, and_1_out, and_2_out, and_3_out, and_4_out, and_5_out, and_6_out, and_7_out, not_2_out, not_1_out, not_0_out;
  wire [7:0] Splitter_9_cmb, and_24_out, Splitter_10_cmb, and_25_out, Splitter_11_cmb, and_26_out, Splitter_12_cmb, and_27_out, Splitter_13_cmb, and_28_out, Splitter_14_cmb, and_29_out, Splitter_15_cmb, and_30_out, Splitter_16_cmb, and_31_out, Splitter_1_cmb, and_16_out, Splitter_2_cmb, and_17_out, Splitter_3_cmb, and_18_out, Splitter_4_cmb, and_19_out, Splitter_5_cmb, and_20_out, Splitter_6_cmb, and_21_out, Splitter_7_cmb, and_22_out, Splitter_8_cmb, and_23_out;
  
  assign and_8_out = not_2_out & s0[3] & not_1_out & not_0_out;
  assign Splitter_9_cmb = {and_8_out,and_8_out,and_8_out,and_8_out,and_8_out,and_8_out,and_8_out,and_8_out};
  assign and_24_out = Splitter_9_cmb & in;
  assign i = and_24_out;
  assign and_9_out = not_2_out & s0[3] & not_1_out & s0[0];
  assign Splitter_10_cmb = {and_9_out,and_9_out,and_9_out,and_9_out,and_9_out,and_9_out,and_9_out,and_9_out};
  assign and_25_out = Splitter_10_cmb & in;
  assign j = and_25_out;
  assign and_10_out = not_2_out & s0[3] & s0[1] & not_0_out;
  assign Splitter_11_cmb = {and_10_out,and_10_out,and_10_out,and_10_out,and_10_out,and_10_out,and_10_out,and_10_out};
  assign and_26_out = Splitter_11_cmb & in;
  assign k = and_26_out;
  assign and_11_out = not_2_out & s0[3] & s0[1] & s0[0];
  assign Splitter_12_cmb = {and_11_out,and_11_out,and_11_out,and_11_out,and_11_out,and_11_out,and_11_out,and_11_out};
  assign and_27_out = Splitter_12_cmb & in;
  assign l = and_27_out;
  assign and_12_out = s0[2] & s0[3] & not_1_out & not_0_out;
  assign Splitter_13_cmb = {and_12_out,and_12_out,and_12_out,and_12_out,and_12_out,and_12_out,and_12_out,and_12_out};
  assign and_28_out = Splitter_13_cmb & in;
  assign m = and_28_out;
  assign and_13_out = s0[2] & s0[3] & not_1_out & s0[0];
  assign Splitter_14_cmb = {and_13_out,and_13_out,and_13_out,and_13_out,and_13_out,and_13_out,and_13_out,and_13_out};
  assign and_29_out = Splitter_14_cmb & in;
  assign n = and_29_out;
  assign and_14_out = s0[2] & s0[3] & s0[1] & not_0_out;
  assign Splitter_15_cmb = {and_14_out,and_14_out,and_14_out,and_14_out,and_14_out,and_14_out,and_14_out,and_14_out};
  assign and_30_out = Splitter_15_cmb & in;
  assign o = and_30_out;
  assign and_15_out = s0[2] & s0[3] & s0[1] & s0[0];
  assign Splitter_16_cmb = {and_15_out,and_15_out,and_15_out,and_15_out,and_15_out,and_15_out,and_15_out,and_15_out};
  assign and_31_out = Splitter_16_cmb & in;
  assign p = and_31_out;
  assign not_3_out = ~s0[3];
  assign and_0_out = not_2_out & not_3_out & not_1_out & not_0_out;
  assign Splitter_1_cmb = {and_0_out,and_0_out,and_0_out,and_0_out,and_0_out,and_0_out,and_0_out,and_0_out};
  assign and_16_out = Splitter_1_cmb & in;
  assign a = and_16_out;
  assign and_1_out = not_2_out & not_3_out & not_1_out & s0[0];
  assign Splitter_2_cmb = {and_1_out,and_1_out,and_1_out,and_1_out,and_1_out,and_1_out,and_1_out,and_1_out};
  assign and_17_out = Splitter_2_cmb & in;
  assign b = and_17_out;
  assign and_2_out = not_2_out & not_3_out & s0[1] & not_0_out;
  assign Splitter_3_cmb = {and_2_out,and_2_out,and_2_out,and_2_out,and_2_out,and_2_out,and_2_out,and_2_out};
  assign and_18_out = Splitter_3_cmb & in;
  assign c = and_18_out;
  assign and_3_out = not_2_out & not_3_out & s0[1] & s0[0];
  assign Splitter_4_cmb = {and_3_out,and_3_out,and_3_out,and_3_out,and_3_out,and_3_out,and_3_out,and_3_out};
  assign and_19_out = Splitter_4_cmb & in;
  assign d = and_19_out;
  assign and_4_out = s0[2] & not_3_out & not_1_out & not_0_out;
  assign Splitter_5_cmb = {and_4_out,and_4_out,and_4_out,and_4_out,and_4_out,and_4_out,and_4_out,and_4_out};
  assign and_20_out = Splitter_5_cmb & in;
  assign e = and_20_out;
  assign and_5_out = s0[2] & not_3_out & not_1_out & s0[0];
  assign Splitter_6_cmb = {and_5_out,and_5_out,and_5_out,and_5_out,and_5_out,and_5_out,and_5_out,and_5_out};
  assign and_21_out = Splitter_6_cmb & in;
  assign f = and_21_out;
  assign and_6_out = s0[2] & not_3_out & s0[1] & not_0_out;
  assign Splitter_7_cmb = {and_6_out,and_6_out,and_6_out,and_6_out,and_6_out,and_6_out,and_6_out,and_6_out};
  assign and_22_out = Splitter_7_cmb & in;
  assign g = and_22_out;
  assign and_7_out = s0[2] & not_3_out & s0[1] & s0[0];
  assign Splitter_8_cmb = {and_7_out,and_7_out,and_7_out,and_7_out,and_7_out,and_7_out,and_7_out,and_7_out};
  assign and_23_out = Splitter_8_cmb & in;
  assign h = and_23_out;
  assign not_2_out = ~s0[2];
  assign not_1_out = ~s0[1];
  assign not_0_out = ~s0[0];
endmodule

module multiplexeur_8bitx2(out_0, out_1, inp_0, inp_1, inp_2);
  output [7:0] out_0, out_1;
  input inp_0;
  input [7:0] inp_1, inp_2;
  wire not_0_out, nor_1_out, nor_0_out, const_0;
  wire [7:0] and_1_out, and_0_out, Splitter_1_cmb, Splitter_0_cmb;
  assign and_1_out = inp_2 & Splitter_1_cmb;
  assign out_0 = and_1_out;
  assign and_0_out = inp_1 & Splitter_0_cmb;
  assign out_1 = and_0_out;
  assign not_0_out = ~inp_0;
  assign nor_1_out = ~(not_0_out | const_0);
  assign Splitter_1_cmb = {nor_1_out,nor_1_out,nor_1_out,nor_1_out,nor_1_out,nor_1_out,nor_1_out,nor_1_out};
  assign nor_0_out = ~(inp_0 | const_0);
  assign Splitter_0_cmb = {nor_0_out,nor_0_out,nor_0_out,nor_0_out,nor_0_out,nor_0_out,nor_0_out,nor_0_out};
  assign const_0 = 1'b0;
endmodule











module multboucle(out_0, out_1, out1, out2, clk_0, in2, in1, activate, reset, clk);
  output out_0;
  output [2:0] out_1;
  output [7:0] out1, out2;
  input activate, reset, clk, clk_0;
  input [7:0] in2, in1;
  wire not_0_out, and_0_out, or_0_out, mult8opti_0_out_1, mult8opti_0_out_4, Demultiplexer_1_out_0, Demultiplexer_1_out_1, Demultiplexer_1_out_2, Demultiplexer_1_out_3, Demultiplexer_1_out_4, Demultiplexer_1_out_5, Demultiplexer_1_out_6, Demultiplexer_1_out_7, basculeD_2_out_0, basculeD_2_out_1, basculeD_3_out_0, basculeD_3_out_1, basculeD_4_out_0, basculeD_4_out_1, basculeD_5_out_0, basculeD_5_out_1, basculeD_6_out_0, basculeD_6_out_1, basculeD_7_out_0, basculeD_7_out_1, basculeD_8_out_0, basculeD_8_out_1, basculeD_9_out_0, basculeD_9_out_1, Demultiplexer_0_out_0, Demultiplexer_0_out_1, Demultiplexer_0_out_2, Demultiplexer_0_out_3, Demultiplexer_0_out_4, Demultiplexer_0_out_5, Demultiplexer_0_out_6, Demultiplexer_0_out_7, DflipFlop_0_Q, Multiplexer_0_out, const_0;
  wire [2:0] mult8opti_0_out_2, DflipFlop_1_Q;
  wire [7:0] basculeD8_11_out_0, basculeD8_11_out_1, mult8opti_0_out_0, mult8opti_0_out_3, Splitter_1_cmb, basculeD8_10_out_0, basculeD8_10_out_1, cptbin_1_out, basculeD8_12_out_0, basculeD8_12_out_1;
  assign not_0_out = ~clk_0;
  assign and_0_out = not_0_out & DflipFlop_0_Q;
  assign or_0_out = and_0_out | reset;
  basculeD8 basculeD8_11(basculeD8_11_out_0, basculeD8_11_out_1, mult8opti_0_out_4, or_0_out, mult8opti_0_out_0);
  mult8opti mult8opti_0(mult8opti_0_out_0, mult8opti_0_out_1, mult8opti_0_out_2, mult8opti_0_out_3, mult8opti_0_out_4, in2, basculeD8_11_out_0, activate, clk_0, or_0_out, Multiplexer_0_out);
  DflipFlop #(3) DflipFlop_1(DflipFlop_1_Q, , mult8opti_0_out_4, cptbin_1_out[2:0], reset, , );
  Demultiplexer8 Demultiplexer_1(Demultiplexer_1_out_0, Demultiplexer_1_out_1, Demultiplexer_1_out_2, Demultiplexer_1_out_3, Demultiplexer_1_out_4, Demultiplexer_1_out_5, Demultiplexer_1_out_6, Demultiplexer_1_out_7, const_0, DflipFlop_1_Q);
  basculeD basculeD_2(basculeD_2_out_0, basculeD_2_out_1, Demultiplexer_0_out_7, Demultiplexer_1_out_7, or_0_out);
  assign Splitter_1_cmb = {basculeD_2_out_0,basculeD_3_out_0,basculeD_4_out_0,basculeD_5_out_0,basculeD_6_out_0,basculeD_7_out_0,basculeD_8_out_0,basculeD_9_out_0};
  basculeD8 basculeD8_10(basculeD8_10_out_0, basculeD8_10_out_1, cptbin_1_out[3], reset, Splitter_1_cmb);
  assign out1 = basculeD8_10_out_0;
  basculeD basculeD_3(basculeD_3_out_0, basculeD_3_out_1, Demultiplexer_0_out_6, Demultiplexer_1_out_6, or_0_out);
  basculeD basculeD_4(basculeD_4_out_0, basculeD_4_out_1, Demultiplexer_0_out_5, Demultiplexer_1_out_5, or_0_out);
  basculeD basculeD_5(basculeD_5_out_0, basculeD_5_out_1, Demultiplexer_0_out_4, Demultiplexer_1_out_4, or_0_out);
  basculeD basculeD_6(basculeD_6_out_0, basculeD_6_out_1, Demultiplexer_0_out_3, Demultiplexer_1_out_3, or_0_out);
  basculeD basculeD_7(basculeD_7_out_0, basculeD_7_out_1, Demultiplexer_0_out_2, Demultiplexer_1_out_2, or_0_out);
  basculeD basculeD_8(basculeD_8_out_0, basculeD_8_out_1, Demultiplexer_0_out_1, Demultiplexer_1_out_1, or_0_out);
  basculeD basculeD_9(basculeD_9_out_0, basculeD_9_out_1, Demultiplexer_0_out_0, Demultiplexer_1_out_0, or_0_out);
  Demultiplexer8 Demultiplexer_0(Demultiplexer_0_out_0, Demultiplexer_0_out_1, Demultiplexer_0_out_2, Demultiplexer_0_out_3, Demultiplexer_0_out_4, Demultiplexer_0_out_5, Demultiplexer_0_out_6, Demultiplexer_0_out_7, mult8opti_0_out_1, DflipFlop_1_Q);
  cptbin cptbin_1(cptbin_1_out, activate, or_0_out, mult8opti_0_out_4);
  
  DflipFlop DflipFlop_0(DflipFlop_0_Q, , clk_0, cptbin_1_out[3], reset, , );
  basculeD8 basculeD8_12(basculeD8_12_out_0, basculeD8_12_out_1, cptbin_1_out[3], reset, mult8opti_0_out_0);
  assign out2 = basculeD8_12_out_0;
  Multiplexer8 Multiplexer_0(Multiplexer_0_out, in1[0], in1[1], in1[2], in1[3], in1[4], in1[5], in1[6], in1[7], cptbin_1_out[2:0]);
  assign out_0 = Multiplexer_0_out;
  assign out_1 = cptbin_1_out[2:0];
  
  assign const_0 = 1'b1;
endmodule

module JKlatchDown(s1, s2, J, K, clk, reset);
  output s1,  s2;
  input J, K, clk, reset;
  wire or_1_out, nand_7_out, nand_4_out, nand_5_out, or_0_out, nand_3_out, nand_1_out, nand_2_out, nand_0_out, nand_6_out, not_0_out;
  assign or_1_out = nand_1_out | reset;
  assign nand_7_out = ~(J & or_1_out & clk);
  assign nand_4_out = ~(nand_7_out & or_0_out);
  assign nand_5_out = ~(nand_4_out & nand_6_out);
  assign or_0_out = nand_5_out | reset;
  assign nand_3_out = ~(not_0_out & nand_5_out);
  assign nand_1_out = ~(nand_0_out & nand_3_out);
  assign s2 = nand_1_out;
  assign nand_2_out = ~(nand_4_out & not_0_out);
  assign nand_0_out = ~(nand_2_out & or_1_out);
  assign s1 = nand_0_out;
  assign nand_6_out = ~(clk & nand_0_out & K);
  assign not_0_out = ~clk;
endmodule

module Multiplexer4(out, in0, in1, in2, in3, sel);
  parameter WIDTH = 1;
  output reg [WIDTH-1:0] out;
  input [WIDTH-1:0] in0, in1, in2, in3;
  input [1:0] sel;
  
  always @ (*)
    case (sel)
      0 : out = in0;
      1 : out = in1;
      2 : out = in2;
      3 : out = in3;
    endcase
endmodule


module Multiplexer2(out, in0, in1, sel);
  parameter WIDTH = 1;
  output reg [WIDTH-1:0] out;
  input [WIDTH-1:0] in0, in1;
  input [0:0] sel;
  
  always @ (*)
    case (sel)
      0 : out = in0;
      1 : out = in1;
    endcase
endmodule


module Multiplexer16(out, in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, in12, in13, in14, in15, sel);
  parameter WIDTH = 1;
  output reg [WIDTH-1:0] out;
  input [WIDTH-1:0] in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, in12, in13, in14, in15;
  input [3:0] sel;
  
  always @ (*)
    case (sel)
      0 : out = in0;
      1 : out = in1;
      2 : out = in2;
      3 : out = in3;
      4 : out = in4;
      5 : out = in5;
      6 : out = in6;
      7 : out = in7;
      8 : out = in8;
      9 : out = in9;
      10 : out = in10;
      11 : out = in11;
      12 : out = in12;
      13 : out = in13;
      14 : out = in14;
      15 : out = in15;
    endcase
endmodule


module Multiplexer32(out, in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, in12, in13, in14, in15, in16, in17, in18, in19, in20, in21, in22, in23, in24, in25, in26, in27, in28, in29, in30, in31, sel);
  parameter WIDTH = 1;
  output reg [WIDTH-1:0] out;
  input [WIDTH-1:0] in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, in12, in13, in14, in15, in16, in17, in18, in19, in20, in21, in22, in23, in24, in25, in26, in27, in28, in29, in30, in31;
  input [4:0] sel;
  
  always @ (*)
    case (sel)
      0 : out = in0;
      1 : out = in1;
      2 : out = in2;
      3 : out = in3;
      4 : out = in4;
      5 : out = in5;
      6 : out = in6;
      7 : out = in7;
      8 : out = in8;
      9 : out = in9;
      10 : out = in10;
      11 : out = in11;
      12 : out = in12;
      13 : out = in13;
      14 : out = in14;
      15 : out = in15;
      16 : out = in16;
      17 : out = in17;
      18 : out = in18;
      19 : out = in19;
      20 : out = in20;
      21 : out = in21;
      22 : out = in22;
      23 : out = in23;
      24 : out = in24;
      25 : out = in25;
      26 : out = in26;
      27 : out = in27;
      28 : out = in28;
      29 : out = in29;
      30 : out = in30;
      31 : out = in31;
    endcase
endmodule


module Multiplexer8(out, in0, in1, in2, in3, in4, in5, in6, in7, sel);
  parameter WIDTH = 1;
  output reg [WIDTH-1:0] out;
  input [WIDTH-1:0] in0, in1, in2, in3, in4, in5, in6, in7;
  input [2:0] sel;
  
  always @ (*)
    case (sel)
      0 : out = in0;
      1 : out = in1;
      2 : out = in2;
      3 : out = in3;
      4 : out = in4;
      5 : out = in5;
      6 : out = in6;
      7 : out = in7;
    endcase
endmodule


module DflipFlop(q, q_inv, clk, d, a_rst, pre, en);
    parameter WIDTH = 1;
    output reg [WIDTH-1:0] q, q_inv;
    input clk, a_rst, pre, en;
    input [WIDTH-1:0] d;

    always @ (posedge clk or posedge a_rst)
    if (a_rst) begin
        q <= 'b0;
        q_inv <= 'b1;
    end else if (en == 0) ;
    else begin
        q <= d;
        q_inv <= ~d;
    end
endmodule
    
module Demultiplexer16(out0, out1, out2, out3, out4, out5, out6, out7, out8, out9, out10, out11, out12, out13, out14, out15, in, sel);
  parameter WIDTH = 1;
  output reg [WIDTH-1:0] out0, out1, out2, out3, out4, out5, out6, out7, out8, out9, out10, out11, out12, out13, out14, out15;
  input [WIDTH-1:0] in;
  input [3:0] sel;
  
  always @ (*) begin
    out0 = 0;
    out1 = 0;
    out2 = 0;
    out3 = 0;
    out4 = 0;
    out5 = 0;
    out6 = 0;
    out7 = 0;
    out8 = 0;
    out9 = 0;
    out10 = 0;
    out11 = 0;
    out12 = 0;
    out13 = 0;
    out14 = 0;
    out15 = 0;
    case (sel)
      0 : out0 = in;
      1 : out1 = in;
      2 : out2 = in;
      3 : out3 = in;
      4 : out4 = in;
      5 : out5 = in;
      6 : out6 = in;
      7 : out7 = in;
      8 : out8 = in;
      9 : out9 = in;
      10 : out10 = in;
      11 : out11 = in;
      12 : out12 = in;
      13 : out13 = in;
      14 : out14 = in;
      15 : out15 = in;
    endcase
  end
endmodule

module Demultiplexer32(out0, out1, out2, out3, out4, out5, out6, out7, out8, out9, out10, out11, out12, out13, out14, out15, out16, out17, out18, out19, out20, out21, out22, out23, out24, out25, out26, out27, out28, out29, out30, out31, in, sel);
  parameter WIDTH = 1;
  output reg [WIDTH-1:0] out0, out1, out2, out3, out4, out5, out6, out7, out8, out9, out10, out11, out12, out13, out14, out15, out16, out17, out18, out19, out20, out21, out22, out23, out24, out25, out26, out27, out28, out29, out30, out31;
  input [WIDTH-1:0] in;
  input [4:0] sel;
  
  always @ (*) begin
    out0 = 0;
    out1 = 0;
    out2 = 0;
    out3 = 0;
    out4 = 0;
    out5 = 0;
    out6 = 0;
    out7 = 0;
    out8 = 0;
    out9 = 0;
    out10 = 0;
    out11 = 0;
    out12 = 0;
    out13 = 0;
    out14 = 0;
    out15 = 0;
    out16 = 0;
    out17 = 0;
    out18 = 0;
    out19 = 0;
    out20 = 0;
    out21 = 0;
    out22 = 0;
    out23 = 0;
    out24 = 0;
    out25 = 0;
    out26 = 0;
    out27 = 0;
    out28 = 0;
    out29 = 0;
    out30 = 0;
    out31 = 0;
    case (sel)
      0 : out0 = in;
      1 : out1 = in;
      2 : out2 = in;
      3 : out3 = in;
      4 : out4 = in;
      5 : out5 = in;
      6 : out6 = in;
      7 : out7 = in;
      8 : out8 = in;
      9 : out9 = in;
      10 : out10 = in;
      11 : out11 = in;
      12 : out12 = in;
      13 : out13 = in;
      14 : out14 = in;
      15 : out15 = in;
      16 : out16 = in;
      17 : out17 = in;
      18 : out18 = in;
      19 : out19 = in;
      20 : out20 = in;
      21 : out21 = in;
      22 : out22 = in;
      23 : out23 = in;
      24 : out24 = in;
      25 : out25 = in;
      26 : out26 = in;
      27 : out27 = in;
      28 : out28 = in;
      29 : out29 = in;
      30 : out30 = in;
      31 : out31 = in;
    endcase
  end
endmodule

module Demultiplexer8(out0, out1, out2, out3, out4, out5, out6, out7, in, sel);
  parameter WIDTH = 1;
  output reg [WIDTH-1:0] out0, out1, out2, out3, out4, out5, out6, out7;
  input [WIDTH-1:0] in;
  input [2:0] sel;
  
  always @ (*) begin
    out0 = 0;
    out1 = 0;
    out2 = 0;
    out3 = 0;
    out4 = 0;
    out5 = 0;
    out6 = 0;
    out7 = 0;
    case (sel)
      0 : out0 = in;
      1 : out1 = in;
      2 : out2 = in;
      3 : out3 = in;
      4 : out4 = in;
      5 : out5 = in;
      6 : out6 = in;
      7 : out7 = in;
    endcase
  end
endmodule
